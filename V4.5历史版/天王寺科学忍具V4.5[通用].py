import os
import random
import ctypes
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton,QSystemTrayIcon
from PyQt5.QtGui import QPixmap, QFont ,QFontMetrics,QGuiApplication,QIcon
from PyQt5 import QtCore, QtWidgets
from PyQt5 import QtGui
from PyQt5.QtCore import Qt, pyqtSignal,QTimer,QThread,QRect
import sys
import threading
import time
import pynput.keyboard as pynput_keyboard
import mouse
import keyboard
import shutil
import socket
def 发送打开次数():
    """
    向指定服务器发送 '脚本打开次数+1' 数据，并检测连接状态。
    功能:
    1. 如果服务器无法访问（如防火墙或网络问题），输出相应提示。
    2. 如果服务器可以访问，但服务端程序未启动，输出相应提示。
    3. 如果成功发送数据，输出成功信息。
    """
    服务器_IP = '182.92.178.158'
    端口 = 12345
    数据 = "脚本打开次数+1"
    try:
        # 创建一个socket对象
        客户端 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        客户端.settimeout(5)  # 设置超时时间为5秒
        # 尝试连接到服务器
        客户端.connect((服务器_IP, 端口))
        # 尝试发送数据到服务器
        客户端.send(数据.encode('utf-8'))
        print("哇袄!")
    except socket.timeout:
        print("可能禁止")
    except ConnectionRefusedError:
        print("在线但无")
    except socket.error as e:
        print(f"无法哇袄")
    finally:
        # 关闭客户端socket
        客户端.close()
发送打开次数()
#DPI与字体相关部分
def 获取DPI大小():
    try:
        return ctypes.windll.shcore.GetScaleFactorForDevice(0) / 100
    except:
        return 1
DPI大小 = 获取DPI大小()
窗口使用稍小字体 = QFont("黑体", int(13 / DPI大小))
窗口使用字体 = QFont("黑体", int(15 / DPI大小))
窗口使用稍大字体 = QFont("黑体", int(17 / DPI大小))
#路径修正函数 获取资源文件路径的函数
def 路径修正(相对路径):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, 相对路径)
    return 相对路径
#
选项列表 = [
    ("Doki Pipo☆Emotion", "奇迹般的访问数无限延伸",路径修正("文件/icon/1.ico")),
    ("Tele-telepathy", "将一个又一个的点联结起来\n连成了线 然后变成了圆",路径修正("文件/icon/6.ico")),
    ("Analogue Heart", "连接起来吧 Analogue Heart\n那最重要的 Analogue Heart",路径修正("文件/icon/1.ico")),
    ("First Love Again", "晚霞染红了天空[今天]将迎来落幕\n我们又留下了什么呢 在意 却又无能为力",路径修正("文件/icon/3.ico"),),
    ("私はマグネット","为了他人而做些什么 从前的自己想都没想过\n这对我来说是 奇迹的伟大的事情哟",路径修正("文件/icon/1.ico"),),
    ("相连的Connect","现实中又没有[Ctrl]+[Z]\n自己来定义有些复杂呢",路径修正("文件/icon/5.ico"),),
]
随机标题, 随机信息,随机图标路径 = random.choice(选项列表)
def 显示通知(标题, 信息, 图标路径):
    # 创建一个应用程序对象
    应用程序 = QApplication(sys.argv)

    # 创建系统托盘图标对象
    托盘图标 = QSystemTrayIcon()

    # 检查图标路径是否存在
    if 图标路径 and os.path.exists(图标路径):
        托盘图标.setIcon(QIcon(图标路径))
    else:
        print(f"图标路径 '{图标路径}' 不存在，使用默认图标。")
        托盘图标.setIcon(QIcon())  # 使用默认图标

    # 设置通知消息
    托盘图标.show()
    托盘图标.showMessage(标题, 信息, QSystemTrayIcon.Information, 5000)  # 5000毫秒 = 5秒

    # 使用 QTimer 关闭 QApplication 而不启动事件循环
    QTimer.singleShot(1000, 应用程序.quit)  # 1秒后关闭 QApplication
# 使用示例
显示通知(随机标题, 随机信息, 随机图标路径)
# 子窗口控件参数列表
子窗口控件参数列表 = [
    ("文件/武斗赛.png", "自动记录", 3, 0, "自动记录秘卷通灵!"),
    ("文件/回放.png", "自动保存", 4, 0, "回放!"),
    ("文件/柔拳法_忍战宁次.png", "目押点穴", 0, 1, "柔拳法_忍战宁次!"),
    ("文件/百豪樱花坠_忍战樱.png", "百豪樱花坠", 1, 1, "百豪樱花坠_忍战樱!"),
    ("文件/雷虐水平千代舞_青年艾.png", "雷虐水平", 2, 1, "雷虐水平千代舞_青年艾!"),
    ("文件/九面苏婆诃_旋涡面麻.png", "九面苏婆诃", 3, 1, "九面苏婆诃_旋涡面麻!"),
    ("文件/斩杀_晓创生飞段.png", "邪神大人!", 4, 1, "斩杀_晓创生飞段!"),
    ("文件/秘术心脏夺取_秽土角都.png", "心脏夺取", 5, 1, "秘术心脏夺取_秽土角都!"),
    ("文件/漂泊佩恩.png", "漂泊佩恩", 10, 1, "漂泊佩恩!"),
    ("文件/须佐佐助.png", "须佐佐助", 11, 1, "须佐佐助!"),
    ("文件/青年长门.png", "青年长门", 12, 1, "青年长门!"),
    ("文件/冬日花火.png", "冬日花火", 13, 1, "冬日花火!"),
    ("文件/阴愈伤灭_秘卷.png", "阴愈伤灭", 0, 2, "阴愈伤灭_秘卷!"),
    ("文件/水冲波_秘卷.png", "水冲波", 1, 2, "水冲波_秘卷!"),
    ("文件/手里剑护身_秘卷.png", "护手里剑", 2, 2, "手里剑护身_秘卷!"),
    ("文件/水龙卷_秘卷.png", "水龙卷", 3, 2, "水龙卷_秘卷!"),
    ("文件/裂炎弹_秘卷.png", "裂炎弹", 4, 2, "裂炎弹_秘卷!"),
    ("文件/气旋_秘卷.png", "气旋", 5, 2, "气旋_秘卷!"),
    ("文件/鬼灯笼_秘卷.png", "鬼灯笼", 6, 2, "鬼灯笼_秘卷!"),
    ("文件/雾隐之术_秘卷.png", "雾隐之术", 7, 2, "雾隐之术_秘卷!"),
    ("文件/御_秘卷.png", "忍体术御", 8, 2, "御_秘卷!"),
    ("文件/反_秘卷.png", "忍体术反", 9, 2, "反_秘卷!"),
    ("文件/水连弹_秘卷.png", "水连弹", 10, 2, "水连弹_秘卷!"),
    ("文件/伊邪那美_秽土鼬.png", "伊邪那美", 0, 3, "伊邪那美_秽土鼬!"),
    ("文件/封术吸印_秽土斑.png", "封术吸印", 1, 3, "封术吸印_秽土斑!"),
    ("文件/封术吸印_青年长门.png", "封术吸印", 2, 3, "封术吸印_青年长门!"),
    ("文件/宇智波反弹_白面具.png", "宇智波反弹", 3, 3, "宇智波反弹_白面具!"),
    ("文件/仙人模式_九喇嘛鸣人.png", "仙人模式", 4, 3, "仙人模式_九喇嘛鸣人!"),
    ("文件/钢遁_卑留呼.png", "钢遁", 5, 3, "钢遁_卑留呼!"),
    ("文件/封术吸印_秽土解斑.png", "封术吸印", 6, 3, "封术吸印_秽土解斑!"),
    ("文件/宇智波反弹_秽土解斑.png", "宇智波反弹", 7, 3, "宇智波反弹_秽土解斑!"),
    ("文件/飞雷神导雷_百战水门.png", "飞雷神导雷", 8, 3, "飞雷神导雷_百战水门!"),
    ("文件/神威_忍战带土.png", "神威", 0, 4, "神威_忍战带土!"),
    ("文件/神威_红夜带土.png", "神威", 1, 4, "神威_红夜带土!"),
    ("文件/神威_白面具.png", "神威", 2, 4, "神威_白面具!"),
    ("文件/暴走_暴怒带土.png", "暴走", 3, 4, "暴走_暴怒带土!"),
    ("文件/须佐能乎胴_秽土解斑.png", "须佐能乎胴", 4, 4, "须佐能乎胴_秽土解斑!"),
    ("文件/八尺琼勾玉_创立斑.png", "八尺琼勾玉", 5, 4, "八尺琼勾玉_创立斑!"),
    ("文件/宇智波反弹_创立斑.png", "宇智波反弹", 6, 4, "宇智波反弹_创立斑!"),
    ("文件/须佐能乎二刀炎舞_宇智波斑.png", "二刀炎舞", 7, 4, "须佐能乎二刀炎舞_宇智波斑!"),
    ("文件/须佐能乎_秽土斑.png", "须佐能乎", 8, 4, "须佐能乎_秽土斑!"),
    ("文件/八卦掌回天_忍战宁次.png", "八卦掌回天", 9, 4, "八卦掌回天_忍战宁次!"),
    ("文件/切刀_长十郎.png", "双刀鲆鲽", 10, 4, "切刀_长十郎!"),
    ("文件/木遁木人之术_秽土柱间.png", "木龙之术", 11, 4, "木遁木人之术_秽土柱间!"),
    ("文件/木遁木龙之术_千手柱间.png", "木龙之术", 12, 4, "木遁木龙之术_千手柱间!"),
    ("文件/木遁木人之术_创立柱间.png", "木人之术", 13, 4, "木遁木人之术_创立柱间!"),
    ("文件/天翔燕舞光瞬影残零式_青年水门.png", "天翔燕舞光瞬影残零式", 0, 5, "天翔燕舞光瞬影残零式_青年水门!"),
    ("文件/超时空闪光燕舞连段_秽土水门.png", "超时空闪光燕舞连段", 1, 5, "超时空闪光燕舞连段_秽土水门!"),
    ("文件/裂空天光斩空闪二式_百战水门.png", "裂空天光斩空闪二式", 2, 5, "裂空天光斩空闪二式_百战水门!"),
    ("文件/飞雷神之术神速_百战水门.png", "神速", 3, 5, "飞雷神之术神速_百战水门!"),
    ("文件/电光火石_波风水门.png", "电光火石", 4, 5, "电光火石_波风水门!"),
    ("文件/雷遁轰雷_秽土三代.png", "雷遁轰雷", 5, 5, "雷遁轰雷_秽土三代!"),
    ("文件/式纸之舞旋_泳装小南.png", "旋", 6, 5, "式纸之舞旋_泳装小南!"),
    ("文件/式纸之舞天使降临_新春小南.png", "天使降临", 7, 5, "式纸之舞天使降临_新春小南!"),
    ("文件/式纸之舞蝶_漂泊小南.png", "蝶", 8, 5, "式纸之舞蝶_漂泊小南!"),
    ("文件/式纸之舞蔽日_漂泊小南.png", "蔽日", 9, 5, "式纸之舞蔽日_漂泊小南!"),
    ("文件/式纸之舞破晓_漂泊小南.png", "破晓", 10, 5, "式纸之舞破晓_漂泊小南!"),
    ("文件/土遁土矛_秽土角都.png", "土遁土矛", 11, 5, "土遁土矛_秽土角都!"),
    ("文件/诅咒仪式_晓创生飞段.png", "诅咒仪式", 12, 5, "诅咒仪式_晓创生飞段!"),
    ("文件/冥遁吸穴孔_卑留呼.png", "冥遁吸穴孔", 13, 5, "冥遁吸穴孔_卑留呼!"),
    ("文件/封术吸印_秽土长门.png", "封术吸印", 0, 6, "封术吸印_秽土长门!"),
    ("文件/水遁_青年长门.png", "水遁", 2, 6, "水遁_青年长门!"),
    ("文件/土遁_青年长门.png", "土遁", 3, 6, "土遁_青年长门!"),
    ("文件/神罗天征_佩恩天道.png", "神罗天征", 4, 6, "神罗天征_佩恩天道!"),
    ("文件/神罗天征_天道超.png", "神罗天征", 5, 6, "神罗天征_天道超!"),
    ("文件/阎王_漂泊佩恩.png", "阎王", 6, 6, "阎王_漂泊佩恩!"),
    ("文件/封术吸印_漂泊佩恩.png", "封术吸印", 7, 6, "封术吸印_漂泊佩恩!"),
    ("文件/尾兽形态二_奇拉比.png", "尾兽化", 8, 6, "尾兽形态二_奇拉比!"),
    ("文件/金刚棍_木叶丸.png", "金刚棍", 9, 6, "金刚棍_木叶丸!"),
    ("文件/护主如意棒_木叶丸.png", "如意棒", 10, 6, "护主如意棒_木叶丸!"),
    ("文件/共乘海浪_泳装卡卡西.png", "共乘海浪", 11, 6, "共乘海浪_泳装卡卡西!"),
    ("文件/土遁多重土流壁_忍战卡卡西.png", "土流壁", 12, 6, "土遁多重土流壁_忍战卡卡西!"),
    ("文件/巧雾神行_侠隐照美冥.png", "巧雾神行", 13, 6, "巧雾神行_侠隐照美冥!"),
    ("文件/乌鸦分身术一段_秽土鼬.png", "乌鸦分身", 0, 7, "乌鸦分身术一段_秽土鼬!"),
    ("文件/乌鸦分身术二段_秽土鼬.png", "镜天地转", 1, 7, "乌鸦分身术二段_秽土鼬!"),
    ("文件/乌鸦分身术_新春鼬.png", "乌鸦分身", 2, 7, "乌鸦分身术_新春鼬!"),
    ("文件/八坂之勾玉_须佐鼬.png", "八坂勾玉", 3, 7, "八坂之勾玉_须佐鼬!"),
    ("文件/白磷大蛇_晓蛇.png", "白磷大蛇", 4, 7, "白磷大蛇_晓蛇!"),
    ("文件/白磷大蛇_仙人兜.png", "白磷大蛇", 5, 7, "白磷大蛇_仙人兜!"),
    ("文件/蛇使役术_半蛇兜.png", "大肥蛇", 6, 7, "蛇使役术_半蛇兜!"),
    ("文件/须佐能乎_须佐佐助.png", "须佐能乎", 7, 7, "须佐能乎_须佐佐助!"),
    ("文件/炎遁加具土命飞炎强化_永恒佐助.png", "炎雷神", 8, 7, "炎遁加具土命飞炎强化_永恒佐助!"),
    ("文件/通灵术白蛇_咒印佐助.png", "西内!", 9, 7, "通灵术白蛇_咒印佐助!"),
    ("文件/忍法针地藏_川自.png", "针地藏", 10, 7, "忍法针地藏_川自!"),
    ("文件/通灵术妙木山蛤蟆_舞自.png", "通灵广哥", 11, 7, "通灵术妙木山蛤蟆_舞自!"),
    ("文件/通灵术蛤蟆见世之术_自来也.png", "蛤蟆见世", 12, 7, "通灵术蛤蟆见世之术_自来也!"),
    ("文件/锁镰二段击_山椒鱼半藏.png", "锁镰击", 13, 7, "锁镰二段击_山椒鱼半藏!"),
    ("文件/土遁岩窃棍_不缘.png", "岩窃棍", 0, 8, "土遁岩窃棍_不缘!"),
    ("文件/土遁岩柱枪_不风.png", "岩柱枪", 1, 8, "土遁岩柱枪_不风!"),
    ("文件/磁遁砂铁葬杀_三代风影.png", "砂铁葬杀", 2, 8, "磁遁砂铁葬杀_三代风影!"),
    ("文件/铁矿砂结袭_蝎.png", "铁矿砂结袭", 3, 8, "铁矿砂结袭_蝎!"),
    ("文件/千手操武_晓创生蝎.png", "千手操武", 4, 8, "千手操武_晓创生蝎!"),
    ("文件/我流死寂_漂泊再不斩.png", "我流死寂", 5, 8, "我流死寂_漂泊再不斩!"),
    ("文件/飞绝命_青年三船.png", "飞绝命", 6, 8, "飞绝命_青年三船!"),
    ("文件/天之一斩_青年三船.png", "天之一斩", 7, 8, "天之一斩_青年三船!"),
    ("文件/闪避_七夕阿斯玛.png", "斯玛空间", 8, 8, "闪避_七夕阿斯玛!"),
    ("文件/轻重岩之术_忍战大野木.png", "轻重岩", 9, 8, "轻重岩之术_忍战大野木!"),
    ("文件/驱岩之力轻重岩_黑土.png", "驱岩之力", 10, 8, "驱岩之力轻重岩_黑土!"),
    ("文件/土遁土石连笋轻重岩_黑土.png", "土石连笋", 11, 8, "土遁土石连笋轻重岩_黑土!"),
    ("文件/水遁水鲛弹_狂野鬼鲛.png", "水鲛弹", 12, 8, "水遁水鲛弹_狂野鬼鲛!"),
    ("文件/水遁雨四鲛_狂野鬼鲛.png", "雨四鲛", 13, 8, "水遁雨四鲛_狂野鬼鲛!"),
    ("文件/水遁波乘击_千手扉间.png", "波乘击", 0, 9, "水遁波乘击_千手扉间!"),
    ("文件/换位_千手扉间.png", "飞雷神", 1, 9, "换位_千手扉间!"),
    ("文件/飞雷神斩_秽土扉间.png", "飞雷神斩", 2, 9, "飞雷神斩_秽土扉间!"),
    ("文件/换位_秽土扉间.png", "飞雷神", 3, 9, "换位_秽土扉间!"),
    ("文件/分裂_无.png", "分裂", 4, 9, "分裂_无!"),
    ("文件/粘土分身_新春迪达拉.png", "粘土分身", 5, 9, "粘土分身_新春迪达拉!"),
    ("文件/换位_金角银角.png", "兄弟换位", 6, 9, "换位_金角银角!"),
    ("文件/换位_罗砂.png", "流砂移形", 7, 9, "换位_罗砂!"),
    ("文件/换位_新春止水.png", "瞬身之术", 8, 9, "换位_新春止水!"),
    ("文件/凤仙火爪红_宇智波止水.png", "凤仙火爪红", 9, 9, "凤仙火爪红_宇智波止水!"),
    ("文件/雷遁最强之凯_三代雷影.png", "雷凯", 10, 9, "雷遁最强之铠_三代雷影!"),
    ("文件/仙人模式_仙鸣.png", "仙人模式", 11, 9, "仙人模式_仙鸣!"),
    ("文件/高皇产灵尊_大筒木桃式.png", "高皇产灵尊", 12, 9, "高皇产灵尊_大筒木桃式!")
]
# 在全局部分声明一个变量来存储子窗口的引用
# pyinstaller --onefile  --noconsole --add-data  "文件;文件" --icon=文件/RINA1.ico 天王寺科学忍具V4.5[通用].py
# pyinstaller --onefile --add-data  "文件;文件" --icon=文件/RINA1.ico 天王寺科学忍具V4.5[通用].py
自动记牌与保存回放= None
使用模拟器= None
检测性能级别= None
窗口_子窗口 = None
一叶障窗口 = None
一叶障窗口可见 = False
图片窗口 = None
窗口可见 = False
倒计时所用时间 = 150
倒计时延迟设定 = 150
# 全局字典
按键={
    "关闭程序": "x",
    "普攻键":"j",
    "上方向键":"w",
    "左方向键":"a",
    "下方向键":"s",
    "右方向键":"d",
    "花火回天":"i",
    "花火不告诉你":"y",
    "花火柔拳":"h",
    "花火空掌":"g",
    "花火明察秋毫":"p",
    "花火冬天什么来着":"o",
    "花火快跑":"u",
    "花火快跑划普攻":"u",
    "长门水遁":"y",
    "长门雷遁":"u",
    "长门土遁":"i",
    "长门火遁": "h",
    "长门风遁": "g",
    "佐助天照": "i",
    "漂泊佩恩通灵": "h",
    "触发左方替身": "z",
    "触发右方替身": "c",

}
记牌位置字典={
    #360x120 90x30
    "左通灵":(90,2),
    "右通灵":(1465,2),
    #57x57 30x30
    "左秘卷一": (659,631),
    "左秘卷二": (337,631),
    "左秘卷三": (14,631),
    "右秘卷一": (1213, 632),
    "右秘卷二": (1535, 632),
    "右秘卷三": (1862, 632),
}
左方豆的状态字典 = {
    "左方第一个豆": "无",
    "左方第二个豆": "无",
    "左方第三个豆": "无",
    "左方第四个豆": "无",
    "左方第五个豆": "无",
    "左方第六个豆": "无",}
左方豆的数量字典 = {
    "左方豆的数量": 100,}
右方豆的状态字典 = {
    "右方第一个豆": "无",
    "右方第二个豆": "无",
    "右方第三个豆": "无",
    "右方第四个豆": "无",
    "右方第五个豆": "无",
    "右方第六个豆": "无",}
右方豆的数量字典 = {
    "右方豆的数量": 100,}
判定RGB颜色区间 = {#最终版豆豆检测器测试结果为
    #赤金:149 255 12 255 0 238
    #亮蓝:16 163 17 241 32 248
    #暗青:19 77 18 122 51 159
        #"赤金": [220, 255, 35, 255, 0, 120],
        #"亮蓝": [0, 225, 195, 255, 200, 255],
        #"暗青": [20, 100, 50, 145, 75, 210], }#R1 R2 G1 G2 B1 B2
     "赤金": [173,255,42,255,0,251],
     "亮蓝": [64,231,121,255,167,255],
     "暗青": [24,63,51,120,78,166], #R1 R2 G1 G2 B1 B2
}
每秒检测时间={"检测间隔":0.1,}
状态开关字典={}
我方位置字典 = {"我方位置": "待设定",}
线程开关={"状态":"开启",}
模式暂且占位="决斗场"
整合大字典={}
逍遥模拟器={

    "左方豆的坐标字典场景_决斗场" : {
            "左方第一个豆坐标": (177, 106),
            "左方第二个豆坐标": (208, 106),
            "左方第三个豆坐标": (238, 106),
            "左方第四个豆坐标": (268, 106),
            "左方第五个豆坐标": (299, 106),
            "左方第六个豆坐标": (329, 106), },
    "右方豆的坐标字典场景_决斗场" : {
            "右方第一个豆坐标": (1729, 106),
            "右方第二个豆坐标": (1699, 106),
            "右方第三个豆坐标": (1668, 106),
            "右方第四个豆坐标": (1638, 106),
            "右方第五个豆坐标": (1608, 106),
            "右方第六个豆坐标": (1578, 106), },
    "柱间检测判定_决斗场":{
            "左方秽土柱间位置一": (80,25),
            "左方秽土柱间像素一": (50,49,31),
            "左方秽土柱间位置二": (100,25),
            "左方秽土柱间像素二": (50,49,31),
            "左方秽土柱间位置三": (120,25),
            "左方秽土柱间像素三": (50,49,31),
            "左方秽土柱间位置四": (100,15),
            "左方秽土柱间像素四": (50,50,33),

            "右方秽土柱间位置一": (1830,25),
            "右方秽土柱间像素一": (50,49,31),
            "右方秽土柱间位置二": (1810,25),
            "右方秽土柱间像素二": (50,49,31),
            "右方秽土柱间位置三": (1790,25),
            "右方秽土柱间像素三": (50,49,31),
            "右方秽土柱间位置四": (1810,15),
            "右方秽土柱间像素四": (50,50,33),

            "左方创立柱间位置一": (100,15),
            "左方创立柱间像素一": (46,45,28),
            "左方创立柱间位置二": (125,15),
            "左方创立柱间像素二": (46,45,28),
            "左方创立柱间位置三": (105,10),
            "左方创立柱间像素三": (46,45,28),
            "左方创立柱间位置四": (90,10),
            "左方创立柱间像素四": (46,45,28),

            "右方创立柱间位置一": (1810,10),
            "右方创立柱间像素一": (46,45,28),
            "右方创立柱间位置二": (1830,10),
            "右方创立柱间像素二": (46,45,28),
            "右方创立柱间位置三": (1790,10),
            "右方创立柱间像素三": (46,45,28),
            "右方创立柱间位置四": (1820,5),
            "右方创立柱间像素四": (46,45,28),},
    "其他标志内容_决斗场": {
        "场地检测位置一": (60, 270),
        "场地标志像素一": [(119,111,101), (166,171,175), ],  # 141, 136, 128
        "场地检测位置二": (75, 450),
        "场地标志像素二": [(182,180,162), (221,232,228), ],  # 160, 160, 144
    },

    "左方豆的坐标字典场景_训练营" : {
        "左方第一个豆坐标": (188, 100),
        "左方第二个豆坐标": (218, 100),
        "左方第三个豆坐标": (249, 100),
        "左方第四个豆坐标": (279, 100),
        "左方第五个豆坐标": (310, 100),
        "左方第六个豆坐标": (340, 100), },
    "右方豆的坐标字典场景_训练营" : {
        "右方第一个豆坐标": (1668, 103),
        "右方第二个豆坐标": (1638, 103),
        "右方第三个豆坐标": (1608, 103),
        "右方第四个豆坐标": (1577, 103),
        "右方第五个豆坐标": (1547, 103),
        "右方第六个豆坐标": (1517, 103), },
    "柱间检测判定_训练营" : {
                "左方秽土柱间位置一": (90,15),
                "左方秽土柱间像素一": (50,49,31),
                "左方秽土柱间位置二": (105,10),
                "左方秽土柱间像素二": (50,49,32),
                "左方秽土柱间位置三": (100,20),
                "左方秽土柱间像素三": (50,49,31),
                "左方秽土柱间位置四": (120,20),
                "左方秽土柱间像素四": (50,49,31),

                "右方秽土柱间位置一": (1740,20),
                "右方秽土柱间像素一": (50,49,31),
                "右方秽土柱间位置二": (1750,20),
                "右方秽土柱间像素二": (50,49,31),
                "右方秽土柱间位置三": (1770,25),
                "右方秽土柱间像素三": (50,49,31),
                "右方秽土柱间位置四": (1720,30),
                "右方秽土柱间像素四": (50,48,32),

                "左方创立柱间位置一": (90,10),
                "左方创立柱间像素一": (46,45,28),
                "左方创立柱间位置二": (110,10),
                "左方创立柱间像素二": (46,45,28),
                "左方创立柱间位置三": (130,10),
                "左方创立柱间像素三": (46,45,28),
                "左方创立柱间位置四": (105,15),
                "左方创立柱间像素四": (46,45,28),

                "右方创立柱间位置一": (1730,10),
                "右方创立柱间像素一": (46,45,28),
                "右方创立柱间位置二": (1750,10),
                "右方创立柱间像素二": (46,45,28),
                "右方创立柱间位置三": (1770,10),
                "右方创立柱间像素三": (46,45,28),
                "右方创立柱间位置四": (1750,20),
                "右方创立柱间像素四": (46,45,28), },
    "其他标志内容_训练营":{
        "场地检测位置一":(58,334),
        "场地标志像素一":[(10,10,10),(82,102,126)],#11, 11, 11
        "场地检测位置二":(1113,270),
        "场地标志像素二":[(244,163,82),(249,175,91),],#244, 168, 83
        },
    "结算界面":{
        "举报反馈_位置":(1170,40),
        "举报反馈_像素":(140, 56, 35),
        "保存回放_位置":(1440,40),
        "保存回放_像素":(124, 77, 45),},
    "按钮_位置":{
        "秘卷一_位置":(1740,400),
        "秘卷二_位置":(1710,470),
        "一技能一_位置":(1530,930),
        "一技能二_位置":(1470,970),
        "二技能一_位置":(1550,720),
        "二技能二_位置":(1500,770),
        "下子技能一_位置": (1360,720),
        "下子技能二_位置": (1320,760),
        "上子技能一_位置": (1490,550),
        "上子技能二_位置": (1450,590),
        "奥义_中心_位置":(1727,650),
        "普攻_位置":(1700,900),
        "秘卷_中心_位置":(1731,436),
        "一技能_黄条_位置":(1500,900),#死二飞雷神斩
        "二技能_外圈_位置":(1560,700),
        "长十郎_单刀_位置":(1500,850),
        "青年长门_一技能_位置":(1500,920),
        "青年长门_二技能_位置":(1500,720),
        "秽土角都_心脏夺取_位置":(950,750),},
    "单检测按钮_像素":{
        #特殊
        "二技能_外圈_像素":(0,0,0),
        "忍战宁次_外圈_像素":[(176, 248, 246),(255,255,255)],
        "忍战樱_外圈_像素":[(180, 249, 242),(255,255,255)],

        "换位_罗砂_像素": [(132, 90, 74),(158, 118, 98)],
        "换位_新春止水_像素": [(116, 68, 116),(253, 220, 209)],
        "换位_金角银角_像素": [(157, 81, 33), (166, 87, 36), ],
        "土遁_青年长门_像素": [(103, 137, 191),(154, 214, 205)],
        "水遁_青年长门_像素": [(103, 137, 191),(154, 214, 205)],
        "青年长门_像素": [(103, 137, 191),(154, 214, 205)],
        "须佐能乎_秽土斑_像素": [(8, 121, 243),(20, 66, 182)],
        "秘术心脏夺取_秽土角都_像素": (164, 110, 0),


        #奥义
        "仙人模式_仙鸣_像素":[(153, 53, 50),(154, 53, 50)],
        "式纸之舞蔽日_漂泊小南_像素":[(144, 119, 134),(145, 120, 134)],
        "式纸之舞破晓_漂泊小南_像素":[(50,39,42),(52,39,42)],
        "木遁木人之术_创立柱间_像素":[(102,110,98),(103, 111, 98)],
        #秘卷
        "阴愈伤灭_秘卷_像素":(52, 24, 18),
        "手里剑护身_秘卷_像素":(45, 35, 71),
        "水冲波_秘卷_像素":(98, 196, 190),
        "御_秘卷_像素": (4, 10, 14),
        "反_秘卷_像素": (86, 21, 30),
        "雾隐之术_秘卷_像素": (137, 75, 137),

        "裂炎弹_秘卷_像素":[(251, 221, 66),(255,224,68)],
        #专属秘卷
        "飞雷神导雷_百战水门_像素": (90, 129, 151),
        "伊邪那美_秽土鼬_像素": (102, 3, 15),
        "宇智波反弹_秽土解斑_像素": (79, 118, 151),
        "封术吸印_秽土解斑_像素": (145, 188, 221),
        "封术吸印_青年长门_像素": (201, 245, 250),
        "仙人模式_九喇嘛鸣人_像素": (237, 184, 118),
        "宇智波反弹_白面具_像素":(146, 79, 136),
        "封术吸印_秽土斑_像素": (73, 87, 145),

        #上子技能
        "白磷大蛇_仙人兜_像素": (60, 60, 60),
        "雷遁最强之凯_三代雷影_像素": (41, 103, 185),
        #下子技能
        "九尾狐狸头_九喇嘛鸣人_像素":(201,121,60),
        "雷虐水平千代舞_青年艾_像素":(111, 94, 60),
        "封术吸印_漂泊佩恩_像素": (114, 86, 94),
        "阎王_漂泊佩恩_像素": (93, 81, 77),


        #一号位技能
        "须佐能乎_须佐佐助_像素":(92, 134, 200),
        "炎遁加具土命飞炎强化_永恒佐助_像素":(88, 92, 165),
        "裂空天光斩空闪二式_百战水门_像素": (90, 76, 64),
        "超时空闪光燕舞连段_秽土水门_像素":(168, 95, 35),
        "八尺琼勾玉_创立斑_像素": (47, 31, 75),
        "八卦掌回天_忍战宁次_像素": (62, 120, 205),
        "天翔燕舞光瞬影残零式_青年水门_像素": (89, 96, 91),
        "飞绝命_青年三船_像素": (146, 185, 216),
        "式纸之舞旋_泳装小南_像素": (87, 87, 129),
        "驱岩之力轻重岩_黑土_像素": (140, 77, 74),
        "换位_千手扉间_像素": (43, 131, 187),
        "白磷大蛇_晓蛇_像素": (89, 89, 89),
        "木遁木龙之术_千手柱间_像素": (76, 57, 42),
        "土遁土矛_秽土角都_像素": (50, 119, 169),
        "电光火石_波风水门_像素": (121, 47, 9),
        "木遁木人之术_秽土柱间_像素": (91, 105, 76),
        "尾兽形态二_奇拉比_像素": (181, 28, 13),
        "蛇使役术_半蛇兜_像素": (114, 108, 96),
        "通灵术蛤蟆见世之术_自来也_像素": (124, 108, 89),
        "通灵术白蛇_咒印佐助_像素": (187, 191, 197),
        "暴走_暴怒带土_像素": (240, 86, 76),
        "金刚棍_木叶丸_像素":(62,90,108),

        #二号位技能
        "神威_忍战带土_像素":(53, 53, 109),
        "神罗天征_天道超_像素":(206, 245, 255),
        "神威_红夜带土_像素":(105, 44, 47),
        "忍法针地藏_川自_像素": (166, 166, 165),
        "换位_秽土扉间_像素": (80, 157, 190),
        "宇智波反弹_创立斑_像素": (165, 222, 246),
        "乌鸦分身术一段_秽土鼬_像素": (170, 44, 39),
        "乌鸦分身术二段_秽土鼬_像素": (87, 16, 0),
        "式纸之舞天使降临_新春小南_像素": (75, 44, 75),
        "铁矿砂结袭_蝎_像素": (48, 47, 47),
        "土遁土石连笋轻重岩_黑土_像素": (176, 129, 80),
        "水遁波乘击_千手扉间_像素": (62, 69, 123),
        "通灵术妙木山蛤蟆_舞自_像素": (35, 23, 12),
        "式纸之舞蝶_漂泊小南_像素": (66, 24, 76),
        "封术吸印_秽土长门_像素": (57, 129, 218),
        "神威_白面具_像素": (119, 99, 119),
        "凤仙火爪红_宇智波止水_像素": (85, 80, 133),
        "雷遁轰雷_秽土三代_像素": (58, 48, 111),
        "我流死寂_漂泊再不斩_像素": (159, 145, 145),
        "乌鸦分身术_新春鼬_像素":(86,15,14),
        "护主如意棒_木叶丸_像素":(24,56,81),

        #奥义技能
        "须佐能乎胴_秽土解斑_像素": (155, 216, 255),
        "天之一斩_青年三船_像素": (14, 193, 235),
        "土遁岩柱枪_不风_像素": (79, 31, 16),

    },
    "双检测按钮_像素": {
        # 一号位技能
        "飞雷神斩_秽土扉间_像素一": (34, 50, 101),
        "飞雷神斩_秽土扉间_像素二": (83, 12, 12),  # 实际上是一技能黄条
        # 二号位技能
        "飞雷神之术神速_百战水门_像素一": (53, 52, 83),
        "飞雷神之术神速_百战水门_像素二": (252, 199, 94),
        # 上子技能
        "轻重岩之术_忍战大野木_像素一": (107, 107, 111),
        "轻重岩之术_忍战大野木_像素二": (44, 41, 42),
        # 长十郎
        "切刀_长十郎_像素": [(104, 103, 114), (123, 228, 241), (36, 58, 108), ],
        # 秘卷
        "鬼灯笼_秘卷_像素一": (255, 159, 43),
        "鬼灯笼_秘卷_像素二": (158, 86, 74),

        "水龙卷_秘卷_像素一": (174, 215, 240),
        "水龙卷_秘卷_像素二": (39, 81, 98),

        "气旋_秘卷_像素一": (151, 179, 190),
        "气旋_秘卷_像素二": (202, 202, 189),},
    "漂泊佩恩":{
        "畜生道一位置": (1175,820),
        "饿鬼道一像素": (101,32,32),
        "地狱道一像素": (108, 33, 33),
        "畜生道二位置": (1169,658),
        "饿鬼道二像素": (142,40,40),
        "地狱道二像素": (138, 36, 36),
        "畜生道三位置": (1310,547),
        "饿鬼道三像素": (127,34,34),
        "地狱道三像素": (128, 30, 36),
        "畜生道四位置": (1459,573),
        "饿鬼道四像素": (131,34,34),
        "地狱道四像素": (128, 35, 35),},
    "秘卷记录":{
        "位置一":(1000,830),
        "颜色一":(254,62,0),
        "位置二": (920, 860),
        "颜色二": (254, 49, 0),

        "位置三": (1050, 950),
        "颜色三": (254, 134, 0),
        "位置四": (1050, 900),
        "颜色四": (255, 74, 0),
    },
    "通灵记录":{
        "位置一":(1095,78),
        "颜色一":(255,255,254),
        "位置二": (941,47),
        "颜色二": (254, 254, 252),
    },
}
雷电模拟器={
    "左方豆的坐标字典场景_决斗场": {
        "左方第一个豆坐标": (177, 106),
        "左方第二个豆坐标": (208, 106),
        "左方第三个豆坐标": (238, 106),
        "左方第四个豆坐标": (268, 106),
        "左方第五个豆坐标": (299, 106),
        "左方第六个豆坐标": (329, 106), },
    "右方豆的坐标字典场景_决斗场": {
        "右方第一个豆坐标": (1729, 106),
        "右方第二个豆坐标": (1699, 106),
        "右方第三个豆坐标": (1668, 106),
        "右方第四个豆坐标": (1638, 106),
        "右方第五个豆坐标": (1608, 106),
        "右方第六个豆坐标": (1578, 106), },
    "柱间检测判定_决斗场": {
        "左方秽土柱间位置一": (80, 25),
        "左方秽土柱间像素一": (50, 49, 31),
        "左方秽土柱间位置二": (100, 25),
        "左方秽土柱间像素二": (50, 49, 31),
        "左方秽土柱间位置三": (120, 25),
        "左方秽土柱间像素三": (49, 49, 31),
        "左方秽土柱间位置四": (100, 15),
        "左方秽土柱间像素四": (50, 50, 33),

        "右方秽土柱间位置一": (1830, 25),
        "右方秽土柱间像素一": (50, 49, 31),
        "右方秽土柱间位置二": (1810, 25),
        "右方秽土柱间像素二": (50, 49, 31),
        "右方秽土柱间位置三": (1790, 25),
        "右方秽土柱间像素三": (50, 49, 31),
        "右方秽土柱间位置四": (1810, 15),
        "右方秽土柱间像素四": (50, 50, 33),

        "左方创立柱间位置一": (100, 15),
        "左方创立柱间像素一": (46, 45, 28),
        "左方创立柱间位置二": (125, 15),
        "左方创立柱间像素二": (46, 45, 28),
        "左方创立柱间位置三": (105, 10),
        "左方创立柱间像素三": (46, 45, 28),
        "左方创立柱间位置四": (90, 10),
        "左方创立柱间像素四": (46, 45, 28),

        "右方创立柱间位置一": (1810, 10),
        "右方创立柱间像素一": (46, 45, 28),
        "右方创立柱间位置二": (1830, 10),
        "右方创立柱间像素二": (46, 45, 28),
        "右方创立柱间位置三": (1790, 10),
        "右方创立柱间像素三": (46, 45, 28),
        "右方创立柱间位置四": (1820, 5),
        "右方创立柱间像素四": (46, 45, 28), },
    "其他标志内容_决斗场": {
        "场地检测位置一": (60, 270),
        "场地标志像素一": [(119,111,101), (166,171,175),],  # 141, 136, 128144, 135, 122
        "场地检测位置二": (75, 450),
        "场地标志像素二": [(159,159,143), (200,212,212), ],  # 160, 160, 144
    },

    "左方豆的坐标字典场景_训练营": {
        "左方第一个豆坐标": (188, 100),
        "左方第二个豆坐标": (218, 100),
        "左方第三个豆坐标": (249, 100),
        "左方第四个豆坐标": (279, 100),
        "左方第五个豆坐标": (310, 100),
        "左方第六个豆坐标": (340, 100), },
    "右方豆的坐标字典场景_训练营": {
        "右方第一个豆坐标": (1668, 103),
        "右方第二个豆坐标": (1638, 103),
        "右方第三个豆坐标": (1608, 103),
        "右方第四个豆坐标": (1577, 103),
        "右方第五个豆坐标": (1547, 103),
        "右方第六个豆坐标": (1517, 103), },
    "柱间检测判定_训练营": {
        "左方秽土柱间位置一": (90, 15),
        "左方秽土柱间像素一": (50, 49, 30),
        "左方秽土柱间位置二": (105, 10),
        "左方秽土柱间像素二": (50, 49, 32),
        "左方秽土柱间位置三": (100, 20),
        "左方秽土柱间像素三": (50, 49, 31),
        "左方秽土柱间位置四": (120, 20),
        "左方秽土柱间像素四": (50, 49, 31),

        "右方秽土柱间位置一": (1740, 20),
        "右方秽土柱间像素一": (50, 49, 31),
        "右方秽土柱间位置二": (1750, 20),
        "右方秽土柱间像素二": (50, 49, 31),
        "右方秽土柱间位置三": (1770, 25),
        "右方秽土柱间像素三": (49, 48, 31),
        "右方秽土柱间位置四": (1720, 30),
        "右方秽土柱间像素四": (51, 47, 32),

        "左方创立柱间位置一": (90, 10),
        "左方创立柱间像素一": (46, 45, 28),
        "左方创立柱间位置二": (110, 10),
        "左方创立柱间像素二": (45, 44, 28),
        "左方创立柱间位置三": (130, 10),
        "左方创立柱间像素三": (46, 45, 27),
        "左方创立柱间位置四": (105, 15),
        "左方创立柱间像素四": (46, 45, 28),

        "右方创立柱间位置一": (1730, 10),
        "右方创立柱间像素一": (46, 45, 28),
        "右方创立柱间位置二": (1750, 10),
        "右方创立柱间像素二": (46, 45, 28),
        "右方创立柱间位置三": (1770, 10),
        "右方创立柱间像素三": (46, 45, 28),
        "右方创立柱间位置四": (1750, 20),
        "右方创立柱间像素四": (46, 45, 28), },
    "其他标志内容_训练营":{
        "场地检测位置一":(58,334),
        "场地标志像素一":[(10,10,10),(82,102,126)],#11, 11, 11
        "场地检测位置二":(1113,270),
        "场地标志像素二":[(198,86,24),(249,175,91),],#244, 168, 83
        },
    "结算界面": {
        "举报反馈_位置": (1170, 40),
        "举报反馈_像素": (140, 56, 35),
        "保存回放_位置": (1440, 40),
        "保存回放_像素": (124, 77, 45), },
    "按钮_位置": {
        "秘卷一_位置": (1740, 400),
        "秘卷二_位置": (1710, 470),
        "一技能一_位置": (1530, 930),
        "一技能二_位置": (1470, 970),
        "二技能一_位置": (1550, 720),
        "二技能二_位置": (1500, 770),
        "下子技能一_位置": (1360, 720),
        "下子技能二_位置": (1320, 760),
        "上子技能一_位置": (1490, 550),
        "上子技能二_位置": (1450, 590),
        "奥义_中心_位置": (1727, 650),
        "普攻_位置": (1700, 900),
        "秘卷_中心_位置": (1731, 436),
        "一技能_黄条_位置": (1500, 900),  # 死二飞雷神斩
        "二技能_外圈_位置": (1560, 700),
        "长十郎_单刀_位置": (1500, 850),
        "青年长门_一技能_位置": (1500, 920),
        "青年长门_二技能_位置": (1500, 720),
        "秽土角都_心脏夺取_位置": (950, 750), },
    "单检测按钮_像素": {
        # 特殊
        "二技能_外圈_像素": (0, 0, 0),
        "忍战宁次_外圈_像素": [(176, 248, 246), (255, 255, 255)],
        "忍战樱_外圈_像素": [(180, 249, 242), (255, 255, 255)],

        "换位_罗砂_像素": [(133, 92, 76), (158, 118, 98)],
        "换位_新春止水_像素": [(118, 68, 117), (254, 221, 208)],
        "换位_金角银角_像素": [(158,84,33),(162,85,35),],
        "土遁_青年长门_像素": [(105, 140, 193), (158, 217, 207)],
        "水遁_青年长门_像素": [(105, 140, 193), (158, 217, 207)],
        "须佐能乎_秽土斑_像素": [(8, 122, 243 ), (16, 65, 190)],
        "秘术心脏夺取_秽土角都_像素": (164, 111, 0),
        "青年长门_像素": [(105, 140, 193),(158, 217, 207),],


        # 奥义
        "仙人模式_仙鸣_像素": [(152, 53, 49), (153, 53, 49),],
        "式纸之舞蔽日_漂泊小南_像素": [(150, 127, 143), (151, 127, 143)],
        "式纸之舞破晓_漂泊小南_像素": [(49, 36, 40), (50, 36, 40)],
        "木遁木人之术_创立柱间_像素": [(96, 106, 94), (99, 106, 94)],
        # 秘卷
        "阴愈伤灭_秘卷_像素": (57, 27, 18),
        "手里剑护身_秘卷_像素": (45, 35, 70),
        "水冲波_秘卷_像素": (99, 198, 191),
        "御_秘卷_像素": (4, 10, 14),
        "反_秘卷_像素": (100, 21, 29),
        "雾隐之术_秘卷_像素": (136, 76, 136),

        "裂炎弹_秘卷_像素": [(251, 221, 65), (255, 224, 68)],
        # 专属秘卷
        "飞雷神导雷_百战水门_像素": (83, 121, 139),
        "伊邪那美_秽土鼬_像素": (103, 2, 15),
        "宇智波反弹_秽土解斑_像素": (80, 119, 152),
        "封术吸印_秽土解斑_像素": (108, 143, 194),
        "封术吸印_青年长门_像素": (209, 248, 251),
        "仙人模式_九喇嘛鸣人_像素": (232, 161, 89),
        "封术吸印_秽土斑_像素": (77, 95, 156),
        "宇智波反弹_白面具_像素": (145, 79, 135),

        # 上子技能
        "白磷大蛇_仙人兜_像素": (55, 55, 55),
        "雷遁最强之凯_三代雷影_像素": (42,104,188),


        # 下子技能
        "九尾狐狸头_九喇嘛鸣人_像素": (201, 121, 60),
        "雷虐水平千代舞_青年艾_像素": (111, 94, 60),
        "封术吸印_漂泊佩恩_像素": (115, 87, 95),
        "阎王_漂泊佩恩_像素": (90, 79, 74),


        # 一号位技能
        "炎遁加具土命飞炎强化_永恒佐助_像素": (110, 109, 185),
        "裂空天光斩空闪二式_百战水门_像素": (88, 75, 63),
        "超时空闪光燕舞连段_秽土水门_像素": (168, 96, 35),
        "八尺琼勾玉_创立斑_像素": (47, 31, 75),
        "八卦掌回天_忍战宁次_像素": (40, 116, 208),
        "天翔燕舞光瞬影残零式_青年水门_像素": (115, 110, 78),
        "飞绝命_青年三船_像素": (255, 255, 255),
        "式纸之舞旋_泳装小南_像素": (85, 84, 121),
        "驱岩之力轻重岩_黑土_像素": (153, 74, 82),
        "换位_千手扉间_像素": (43, 131, 187),
        "白磷大蛇_晓蛇_像素": (104, 104, 104),
        "木遁木龙之术_千手柱间_像素": (76, 57, 42),
        "土遁土矛_秽土角都_像素": (51, 118, 168),
        "电光火石_波风水门_像素": (119, 45, 7),
        "通灵术蛤蟆见世之术_自来也_像素": (135, 117, 92),
        "木遁木人之术_秽土柱间_像素": (86, 100, 71),
        "须佐能乎_须佐佐助_像素": (97, 129, 201),
        "蛇使役术_半蛇兜_像素": (114, 108, 96),
        "通灵术白蛇_咒印佐助_像素": (177,184,193),
        "暴走_暴怒带土_像素": (238, 85, 76),
        "金刚棍_木叶丸_像素": (86, 111, 125),
        # 二号位技能
        "神威_忍战带土_像素": (53, 53, 107),
        "神罗天征_天道超_像素": (206, 245, 255),
        "神威_红夜带土_像素": (114, 49, 52),
        "忍法针地藏_川自_像素": (184, 184, 182),
        "换位_秽土扉间_像素": (76, 148, 179),
        "宇智波反弹_创立斑_像素": (136, 201, 242),
        "乌鸦分身术一段_秽土鼬_像素": (153, 39, 35),
        "乌鸦分身术二段_秽土鼬_像素": (88, 17, 0),
        "式纸之舞天使降临_新春小南_像素": (83, 48, 83),
        "铁矿砂结袭_蝎_像素": (49, 49, 48),
        "土遁土石连笋轻重岩_黑土_像素": (177, 129, 80),
        "水遁波乘击_千手扉间_像素": (62, 69, 123),
        "通灵术妙木山蛤蟆_舞自_像素": (52, 35, 17),
        "式纸之舞蝶_漂泊小南_像素": (66, 23, 76),
        "封术吸印_秽土长门_像素": (57, 129, 211),
        "神威_白面具_像素": (118, 98, 118),
        "凤仙火爪红_宇智波止水_像素": (93, 84, 128),
        "天之一斩_青年三船_像素": (19, 171, 225),
        "土遁岩柱枪_不风_像素": (90, 35, 17),
        "雷遁轰雷_秽土三代_像素": (58, 48, 111),
        "我流死寂_漂泊再不斩_像素": (158,144,144),
        "乌鸦分身术_新春鼬_像素":(82,13,12),
        "护主如意棒_木叶丸_像素":(24,56,81),


        # 奥义技能
        "须佐能乎胴_秽土解斑_像素": (155, 216, 255),


    },
    "双检测按钮_像素":{
        #一号位技能
        "飞雷神斩_秽土扉间_像素一": (34, 50, 101),
        "飞雷神斩_秽土扉间_像素二": (87, 14, 14),#实际上是一技能黄条



        #二号位技能
        "飞雷神之术神速_百战水门_像素一":(51, 50, 81),
        "飞雷神之术神速_百战水门_像素二":(248, 181, 62),
        #上子技能
        "轻重岩之术_忍战大野木_像素一":(93, 93, 95),
        "轻重岩之术_忍战大野木_像素二":(45, 44, 46),
        #长十郎
        "切刀_长十郎_像素一": [(74, 69, 90),(112, 223, 243),(35, 47, 86),],
        "切刀_长十郎_像素二": [(75, 76, 97),(112, 223, 243),(50, 49, 78),],
        #秘卷
        "鬼灯笼_秘卷_像素一":(255, 156, 41),
        "鬼灯笼_秘卷_像素二":(142, 71, 76),

        "水龙卷_秘卷_像素一":(169, 212, 241),
        "水龙卷_秘卷_像素二":(22, 73, 93),

        "气旋_秘卷_像素一": (166, 195, 204),
        "气旋_秘卷_像素二": (182, 182, 170),},
    "漂泊佩恩":{
        "畜生道一位置": (1175,820),
        "饿鬼道一像素": (102, 31, 31),
        "地狱道一像素": (108, 32, 32),
        "畜生道二位置": (1169,658),
        "饿鬼道二像素": (143, 40, 40),
        "地狱道二像素": (138, 36, 36),
        "畜生道三位置": (1310,547),
        "饿鬼道三像素": (127,34,34),
        "地狱道三像素": (128, 30, 36),
        "畜生道四位置": (1459,573),
        "饿鬼道四像素": (129, 34, 34),
        "地狱道四像素": (127, 35, 35),},
    "秘卷记录": {
        "位置一": (1000, 830),
        "颜色一": (255, 62, 0),
        "位置二": (920, 860),
        "颜色二": (255, 48, 0),

        "位置三": (1050, 950),
        "颜色三": (254, 134, 0),
        "位置四": (1050, 900),
        "颜色四": (255, 74, 0),
    },
    "通灵记录": {
        "位置一": (1095, 78),
        "颜色一": (255, 255, 254),
        "位置二": (941, 47),
        "颜色二": (254, 254, 252),
    },
}
MUMU模拟器={"1":"1"}
夜神模拟器={"1":"100"}
当前模拟器={"当前模拟器":逍遥模拟器}
整合大字典.update(逍遥模拟器)
截屏字典 = {}
#屏幕截图本体
def 屏幕截图函数():
    global 截屏字典
    屏幕 = QGuiApplication.primaryScreen()
    截屏字典 = {"截屏内容":屏幕.grabWindow(0)}
#获取RGB函数
def 获取像素RGB(像素X轴坐标, 像素Y轴坐标):
    截屏的图像 = 截屏字典["截屏内容"]
    转换完毕的截屏图片 = 截屏的图像.toImage()
    RGB的三色 = 转换完毕的截屏图片.pixelColor(像素X轴坐标, 像素Y轴坐标)
    return RGB的三色.red(), RGB的三色.green(), RGB的三色.blue()
#实际检测RGB
def 屏幕确定点位函数():
    global 工作线程
    global 截屏字典, 模式暂且占位
    global 左方第一个豆RGB, 左方第二个豆RGB, 左方第三个豆RGB, 左方第四个豆RGB, 左方第五个豆RGB, 左方第六个豆RGB
    global 右方第一个豆RGB, 右方第二个豆RGB, 右方第三个豆RGB, 右方第四个豆RGB, 右方第五个豆RGB, 右方第六个豆RGB
    global 秽土柱间左方点位一RGB, 秽土柱间左方点位二RGB, 秽土柱间左方点位三RGB, 秽土柱间左方点位四RGB
    global 秽土柱间右方点位一RGB, 秽土柱间右方点位二RGB, 秽土柱间右方点位三RGB, 秽土柱间右方点位四RGB
    global 创立柱间左方点位一RGB, 创立柱间左方点位二RGB, 创立柱间左方点位三RGB, 创立柱间左方点位四RGB
    global 创立柱间右方点位一RGB, 创立柱间右方点位二RGB, 创立柱间右方点位三RGB, 创立柱间右方点位四RGB
    global 场地检测点位RGB一,场地检测点位RGB二
    #截屏字典 = {"截屏内容": ImageGrab.grab()}
    #工作线程.UPDATE_SIGNAL.emit("阅世")
    场地检测点位RGB一 = 获取像素RGB(整合大字典[f"其他标志内容_{模式暂且占位}"]["场地检测位置一"][0],整合大字典[f"其他标志内容_{模式暂且占位}"]["场地检测位置一"][1])
    场地检测点位RGB二 = 获取像素RGB(整合大字典[f"其他标志内容_{模式暂且占位}"]["场地检测位置二"][0],整合大字典[f"其他标志内容_{模式暂且占位}"]["场地检测位置二"][1])

    左方第一个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第一个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第一个豆坐标"][1])
    左方第二个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第二个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第二个豆坐标"][1])
    左方第三个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第三个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第三个豆坐标"][1])
    左方第四个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第四个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第四个豆坐标"][1])
    左方第五个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第五个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第五个豆坐标"][1])
    左方第六个豆RGB = 获取像素RGB(整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第六个豆坐标"][0],整合大字典[f"左方豆的坐标字典场景_{模式暂且占位}"]["左方第六个豆坐标"][1])
    右方第一个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第一个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第一个豆坐标"][1])
    右方第二个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第二个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第二个豆坐标"][1])
    右方第三个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第三个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第三个豆坐标"][1])
    右方第四个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第四个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第四个豆坐标"][1])
    右方第五个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第五个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第五个豆坐标"][1])
    右方第六个豆RGB = 获取像素RGB(整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第六个豆坐标"][0],整合大字典[f"右方豆的坐标字典场景_{模式暂且占位}"]["右方第六个豆坐标"][1])

    秽土柱间左方点位一RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置一"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置一"][1])
    秽土柱间左方点位二RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置二"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置二"][1])
    秽土柱间左方点位三RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置三"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置三"][1])
    秽土柱间左方点位四RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置四"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方秽土柱间位置四"][1])
    秽土柱间右方点位一RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置一"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置一"][1])
    秽土柱间右方点位二RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置二"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置二"][1])
    秽土柱间右方点位三RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置三"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置三"][1])
    秽土柱间右方点位四RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置四"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方秽土柱间位置四"][1])
    
    创立柱间左方点位一RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置一"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置一"][1])
    创立柱间左方点位二RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置二"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置二"][1])
    创立柱间左方点位三RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置三"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置三"][1])
    创立柱间左方点位四RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置四"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["左方创立柱间位置四"][1])
    创立柱间右方点位一RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置一"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置一"][1])
    创立柱间右方点位二RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置二"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置二"][1])
    创立柱间右方点位三RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置三"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置三"][1])
    创立柱间右方点位四RGB = 获取像素RGB(整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置四"][0],整合大字典[f"柱间检测判定_{模式暂且占位}"]["右方创立柱间位置四"][1])
    if 整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][0][0] <= 场地检测点位RGB一[0] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][1][0] and \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][0][1] <= 场地检测点位RGB一[1] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][1][1] and \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][0][2] <= 场地检测点位RGB一[2] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素一"][1][2] or \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][0][0] <= 场地检测点位RGB二[0] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][1][0] and \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][0][1] <= 场地检测点位RGB二[1] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][1][1] and \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][0][2] <= 场地检测点位RGB二[2] <= \
            整合大字典[f"其他标志内容_{模式暂且占位}"]["场地标志像素二"][1][2]:
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆一',))
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆二',))
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆三',))
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆四',))
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆五',))
        工作线程.UPDATE_SIGNAL.emit(('检测左方豆六',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆一',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆二',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆三',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆四',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆五',))
        工作线程.UPDATE_SIGNAL.emit(('检测右方豆六',))
        工作线程.UPDATE_SIGNAL.emit(('即时触发',))

#豆豆单独检测
def 左方第一个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 左方第一个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 左方第一个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 左方第一个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            左方豆的状态字典["左方第一个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 左方第一个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 左方第一个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 左方第一个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            左方豆的状态字典["左方第一个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 左方第一个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 左方第一个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 左方第一个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            左方豆的状态字典["左方第一个豆"] = "暗青"
    #print("当前检测左一")
def 左方第二个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 左方第二个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 左方第二个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 左方第二个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            左方豆的状态字典["左方第二个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 左方第二个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 左方第二个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 左方第二个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            左方豆的状态字典["左方第二个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 左方第二个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 左方第二个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 左方第二个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            左方豆的状态字典["左方第二个豆"] = "暗青"
    #print("当前检测左二")
def 左方第三个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 左方第三个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 左方第三个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 左方第三个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            左方豆的状态字典["左方第三个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 左方第三个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 左方第三个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 左方第三个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            左方豆的状态字典["左方第三个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 左方第三个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 左方第三个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 左方第三个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            左方豆的状态字典["左方第三个豆"] = "暗青"
    #print("当前检测左三")
def 左方第四个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 左方第四个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 左方第四个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 左方第四个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            左方豆的状态字典["左方第四个豆"] = "赤金"
        elif 判定RGB颜色区间["暗青"][0] <= 左方第四个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 左方第四个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 左方第四个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            左方豆的状态字典["左方第四个豆"] = "暗青"
    #print("当前检测左四")
def 左方第五个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 检测左方是否柱间():
            if 判定RGB颜色区间["赤金"][0] <= 左方第五个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                    判定RGB颜色区间["赤金"][2] <= 左方第五个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                    判定RGB颜色区间["赤金"][4] <= 左方第五个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
                左方豆的状态字典["左方第五个豆"] = "赤金"
            elif 判定RGB颜色区间["暗青"][0] <= 左方第五个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                    判定RGB颜色区间["暗青"][2] <= 左方第五个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                    判定RGB颜色区间["暗青"][4] <= 左方第五个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
                左方豆的状态字典["左方第五个豆"] = "暗青"
        else:
            左方豆的状态字典["左方第五个豆"] = "虚空"
    #print("当前检测左五")
def 左方第六个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 检测左方是否柱间():
            if 判定RGB颜色区间["赤金"][0] <= 左方第六个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                    判定RGB颜色区间["赤金"][2] <= 左方第六个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                    判定RGB颜色区间["赤金"][4] <= 左方第六个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
                左方豆的状态字典["左方第六个豆"] = "赤金"
            elif 判定RGB颜色区间["暗青"][0] <= 左方第六个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                    判定RGB颜色区间["暗青"][2] <= 左方第六个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                    判定RGB颜色区间["暗青"][4] <= 左方第六个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
                左方豆的状态字典["左方第六个豆"] = "暗青"
        else:
            左方豆的状态字典["左方第六个豆"] = "虚空"
    #print("当前检测左六")
def 右方第一个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 右方第一个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 右方第一个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 右方第一个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            右方豆的状态字典["右方第一个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 右方第一个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 右方第一个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 右方第一个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            右方豆的状态字典["右方第一个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 右方第一个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 右方第一个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 右方第一个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            右方豆的状态字典["右方第一个豆"] = "暗青"
    #print("当前检测右一")
def 右方第二个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 右方第二个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 右方第二个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 右方第二个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            右方豆的状态字典["右方第二个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 右方第二个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 右方第二个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 右方第二个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            右方豆的状态字典["右方第二个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 右方第二个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 右方第二个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 右方第二个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            右方豆的状态字典["右方第二个豆"] = "暗青"
    #print("当前检测右二")
def 右方第三个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 右方第三个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 右方第三个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 右方第三个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            右方豆的状态字典["右方第三个豆"] = "赤金"
        elif 判定RGB颜色区间["亮蓝"][0] <= 右方第三个豆RGB[0] <= 判定RGB颜色区间["亮蓝"][1] and \
                判定RGB颜色区间["亮蓝"][2] <= 右方第三个豆RGB[1] <= 判定RGB颜色区间["亮蓝"][3] and \
                判定RGB颜色区间["亮蓝"][4] <= 右方第三个豆RGB[2] <= 判定RGB颜色区间["亮蓝"][5]:
            右方豆的状态字典["右方第三个豆"] = "亮蓝"
        elif 判定RGB颜色区间["暗青"][0] <= 右方第三个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 右方第三个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 右方第三个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            右方豆的状态字典["右方第三个豆"] = "暗青"
    #print("当前检测右三")
def 右方第四个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 判定RGB颜色区间["赤金"][0] <= 右方第四个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                判定RGB颜色区间["赤金"][2] <= 右方第四个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                判定RGB颜色区间["赤金"][4] <= 右方第四个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
            右方豆的状态字典["右方第四个豆"] = "赤金"
        elif 判定RGB颜色区间["暗青"][0] <= 右方第四个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                判定RGB颜色区间["暗青"][2] <= 右方第四个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                判定RGB颜色区间["暗青"][4] <= 右方第四个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
            右方豆的状态字典["右方第四个豆"] = "暗青"
    #print("当前检测右四")
def 右方第五个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 检测右方是否柱间():
            if 判定RGB颜色区间["赤金"][0] <= 右方第五个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                    判定RGB颜色区间["赤金"][2] <= 右方第五个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                    判定RGB颜色区间["赤金"][4] <= 右方第五个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
                右方豆的状态字典["右方第五个豆"] = "赤金"
            elif 判定RGB颜色区间["暗青"][0] <= 右方第五个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                    判定RGB颜色区间["暗青"][2] <= 右方第五个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                    判定RGB颜色区间["暗青"][4] <= 右方第五个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
                右方豆的状态字典["右方第五个豆"] = "暗青"
        else:
            右方豆的状态字典["右方第五个豆"] = "虚空"
    #print("当前检测右五")
def 右方第六个豆判定颜色():
    if 线程开关["状态"] == "开启":
        if 检测右方是否柱间():
            if 判定RGB颜色区间["赤金"][0] <= 右方第六个豆RGB[0] <= 判定RGB颜色区间["赤金"][1] and \
                    判定RGB颜色区间["赤金"][2] <= 右方第六个豆RGB[1] <= 判定RGB颜色区间["赤金"][3] and \
                    判定RGB颜色区间["赤金"][4] <= 右方第六个豆RGB[2] <= 判定RGB颜色区间["赤金"][5]:
                右方豆的状态字典["右方第六个豆"] = "赤金"
            elif 判定RGB颜色区间["暗青"][0] <= 右方第六个豆RGB[0] <= 判定RGB颜色区间["暗青"][1] and \
                    判定RGB颜色区间["暗青"][2] <= 右方第六个豆RGB[1] <= 判定RGB颜色区间["暗青"][3] and \
                    判定RGB颜色区间["暗青"][4] <= 右方第六个豆RGB[2] <= 判定RGB颜色区间["暗青"][5]:
                右方豆的状态字典["右方第六个豆"] = "暗青"
        else:
            右方豆的状态字典["右方第六个豆"] = "虚空"
    #print("当前检测右六")
#柱间检测
def 检测左方是否柱间():
    #print("当前检测左方柱间")
    检测字典 = 整合大字典[f"柱间检测判定_{模式暂且占位}"]
    秽土柱间点位 = [
        ("左方秽土柱间像素一", 秽土柱间左方点位一RGB),
        ("左方秽土柱间像素二", 秽土柱间左方点位二RGB),
        ("左方秽土柱间像素三", 秽土柱间左方点位三RGB),
        ("左方秽土柱间像素四", 秽土柱间左方点位四RGB),]
    创立柱间点位 = [
        ("左方创立柱间像素一", 创立柱间左方点位一RGB),
        ("左方创立柱间像素二", 创立柱间左方点位二RGB),
        ("左方创立柱间像素三", 创立柱间左方点位三RGB),
        ("左方创立柱间像素四", 创立柱间左方点位四RGB),]
    for 像素, RGB in 秽土柱间点位 + 创立柱间点位:
        if 检测字典[像素] == RGB:
            #print("左方确实有柱间")
            return True
    #print("左方没有柱间")
    return False
def 检测右方是否柱间():
    #print("当前检测右方柱间")
    检测字典 = 整合大字典[f"柱间检测判定_{模式暂且占位}"]
    秽土柱间点位 = [
        ("右方秽土柱间像素一", 秽土柱间右方点位一RGB),
        ("右方秽土柱间像素二", 秽土柱间右方点位二RGB),
        ("右方秽土柱间像素三", 秽土柱间右方点位三RGB),
        ("右方秽土柱间像素四", 秽土柱间右方点位四RGB),]
    创立柱间点位 = [
        ("右方创立柱间像素一", 创立柱间右方点位一RGB),
        ("右方创立柱间像素二", 创立柱间右方点位二RGB),
        ("右方创立柱间像素三", 创立柱间右方点位三RGB),
        ("右方创立柱间像素四", 创立柱间右方点位四RGB),]
    for 像素, RGB in 秽土柱间点位 + 创立柱间点位:
        if 检测字典[像素] == RGB:
            #print("右方确实有柱间")
            return True
    #print("右方没有柱间")
    return False
#豆豆结算
def 左方所有豆豆结算():
    global 工作线程
    if 线程开关["状态"] == "开启":
        if 左方豆的状态字典["左方第一个豆"] == "暗青" and 左方豆的状态字典["左方第二个豆"] == "暗青" and \
                左方豆的状态字典["左方第三个豆"] == "暗青" and 左方豆的状态字典["左方第四个豆"] == "暗青":
            if 检测左方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◇◇◇◇◇◇", "#00d29e","#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◇◇◇◇    ", "#00d29e","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 1:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 0
        elif 左方豆的状态字典["左方第一个豆"] == "亮蓝" and 左方豆的状态字典["左方第二个豆"] == "暗青" and \
                左方豆的状态字典["左方第三个豆"] == "暗青" and 左方豆的状态字典["左方第四个豆"] == "暗青":
            if 检测左方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◇◇◇◇◇", "#2aa4db","#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◇◇◇    ", "#2aa4db","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 2:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 1
        elif 左方豆的状态字典["左方第一个豆"] == "亮蓝" and 左方豆的状态字典["左方第二个豆"] == "亮蓝" and \
                左方豆的状态字典["左方第三个豆"] == "暗青" and 左方豆的状态字典["左方第四个豆"] == "暗青":
            if 检测左方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◇◇◇◇", "#2aa4db","#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◇◇    ", "#2aa4db","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 3:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 2
        elif 左方豆的状态字典["左方第一个豆"] == "亮蓝" and 左方豆的状态字典["左方第二个豆"] == "亮蓝" and \
                左方豆的状态字典["左方第三个豆"] == "亮蓝" and 左方豆的状态字典["左方第四个豆"] == "暗青":
            if 检测左方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◇◇◇", "#2aa4db","#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◇    ", "#2aa4db","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 4:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            elif 左方豆的数量字典["左方豆的数量"] == 5:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            elif 左方豆的数量字典["左方豆的数量"] == 6:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 3
        elif 左方豆的状态字典["左方第一个豆"] == "赤金" and 左方豆的状态字典["左方第二个豆"] == "赤金" and \
                左方豆的状态字典["左方第三个豆"] == "赤金" and 左方豆的状态字典["左方第四个豆"] == "赤金" and \
                左方豆的状态字典["左方第五个豆"] == "赤金" and 左方豆的状态字典["左方第六个豆"] == "暗青":
            工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◆◆◇", "#f43232","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 6:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 5
        elif 左方豆的状态字典["左方第一个豆"] == "赤金" and 左方豆的状态字典["左方第二个豆"] == "赤金" and \
                左方豆的状态字典["左方第三个豆"] == "赤金" and 左方豆的状态字典["左方第四个豆"] == "赤金" and \
                左方豆的状态字典["左方第五个豆"] == "赤金" and 左方豆的状态字典["左方第六个豆"] == "赤金":
            工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◆◆◆", "#f43232","#ffffff",))
            左方豆的数量字典["左方豆的数量"] = 6
        elif 左方豆的状态字典["左方第一个豆"] == "赤金" and 左方豆的状态字典["左方第二个豆"] == "赤金" and \
                左方豆的状态字典["左方第三个豆"] == "赤金" and 左方豆的状态字典["左方第四个豆"] == "赤金":
            if 检测左方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◆◇◇", "#f43232","#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本',"◆◆◆◆    ", "#ff791b","#ffffff",))
            if 左方豆的数量字典["左方豆的数量"] == 5:
                if 左方豆的状态字典["左方第五个豆"] == "暗青" and 左方豆的状态字典["左方第六个豆"] == "暗青":
                    工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
            左方豆的数量字典["左方豆的数量"] = 4
def 右方所有豆豆结算():
    if 线程开关["状态"] == "开启":
        if 右方豆的状态字典["右方第一个豆"] == "暗青" and 右方豆的状态字典["右方第二个豆"] == "暗青" and \
                右方豆的状态字典["右方第三个豆"] == "暗青" and 右方豆的状态字典["右方第四个豆"] == "暗青":
            if 检测右方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◇◇◇◇◇", "#00d29e", "#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"    ◇◇◇◇", "#00d29e", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 1:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 0
        elif 右方豆的状态字典["右方第一个豆"] == "亮蓝" and 右方豆的状态字典["右方第二个豆"] == "暗青" and \
                右方豆的状态字典["右方第三个豆"] == "暗青" and 右方豆的状态字典["右方第四个豆"] == "暗青":
            if 检测右方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◇◇◇◇◆", "#2aa4db", "#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"    ◇◇◇◆", "#2aa4db", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 2:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 1
        elif 右方豆的状态字典["右方第一个豆"] == "亮蓝" and 右方豆的状态字典["右方第二个豆"] == "亮蓝" and \
                右方豆的状态字典["右方第三个豆"] == "暗青" and 右方豆的状态字典["右方第四个豆"] == "暗青":
            if 检测右方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◇◇◇◆◆", "#2aa4db", "#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"    ◇◇◆◆", "#2aa4db", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 3:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 2
        elif 右方豆的状态字典["右方第一个豆"] == "亮蓝" and 右方豆的状态字典["右方第二个豆"] == "亮蓝" and \
                右方豆的状态字典["右方第三个豆"] == "亮蓝" and 右方豆的状态字典["右方第四个豆"] == "暗青":
            if 检测右方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◇◇◆◆◆", "#2aa4db", "#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"    ◇◆◆◆", "#2aa4db", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 4:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            elif 右方豆的数量字典["右方豆的数量"] == 5:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            elif 右方豆的数量字典["右方豆的数量"] == 6:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 3
        elif 右方豆的状态字典["右方第一个豆"] == "赤金" and 右方豆的状态字典["右方第二个豆"] == "赤金" and \
                右方豆的状态字典["右方第三个豆"] == "赤金" and 右方豆的状态字典["右方第四个豆"] == "赤金" and \
                右方豆的状态字典["右方第五个豆"] == "赤金" and 右方豆的状态字典["右方第六个豆"] == "暗青":
            工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◆◆◆◆◆", "#f43232", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 6:
                工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 5
        elif 右方豆的状态字典["右方第一个豆"] == "赤金" and 右方豆的状态字典["右方第二个豆"] == "赤金" and \
                右方豆的状态字典["右方第三个豆"] == "赤金" and 右方豆的状态字典["右方第四个豆"] == "赤金" and \
                右方豆的状态字典["右方第五个豆"] == "赤金" and 右方豆的状态字典["右方第六个豆"] == "赤金":
            工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◆◆◆◆◆◆", "#f43232", "#ffffff",))
            右方豆的数量字典["右方豆的数量"] = 6
        elif 右方豆的状态字典["右方第一个豆"] == "赤金" and 右方豆的状态字典["右方第二个豆"] == "赤金" and \
                右方豆的状态字典["右方第三个豆"] == "赤金" and 右方豆的状态字典["右方第四个豆"] == "赤金":
            if 检测右方是否柱间():
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"◇◇◆◆◆◆", "#f43232", "#ffffff",))
            else:
                工作线程.UPDATE_SIGNAL.emit(('更新右方文本',"    ◆◆◆◆", "#ff791b", "#ffffff",))
            if 右方豆的数量字典["右方豆的数量"] == 5:
                if 右方豆的状态字典["右方第五个豆"] == "暗青" and 右方豆的状态字典["右方第六个豆"] == "暗青":
                    工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
            右方豆的数量字典["右方豆的数量"] = 4
#自动记牌
def 自动记录秘卷():
    if 状态开关字典.get(f"状态_武斗赛", "关闭") == "开启":
        加载界面RGB一 = 获取像素RGB(整合大字典["秘卷记录"]["位置一"][0],整合大字典["秘卷记录"]["位置一"][1])
        加载界面RGB二 = 获取像素RGB(整合大字典["秘卷记录"]["位置二"][0],整合大字典["秘卷记录"]["位置二"][1])
        if 加载界面RGB一 == 整合大字典["秘卷记录"]["颜色一"] and 加载界面RGB二 == 整合大字典["秘卷记录"]["颜色二"]:
            秘卷截图()
def 自动记录通灵():
    if 状态开关字典.get(f"状态_武斗赛", "关闭") == "开启":
        武斗界面RGB一 = 获取像素RGB(整合大字典["通灵记录"]["位置一"][0], 整合大字典["通灵记录"]["位置一"][1])
        武斗界面RGB二 = 获取像素RGB(整合大字典["通灵记录"]["位置二"][0], 整合大字典["通灵记录"]["位置二"][1])
        if 武斗界面RGB一 == 整合大字典["通灵记录"]["颜色一"] and 武斗界面RGB二 == 整合大字典["通灵记录"]["颜色二"]:
            通灵截图()
#超级类
class 工作者大线程类(QThread):
    UPDATE_SIGNAL = pyqtSignal(tuple)
    global 工作线程

    def run(self):
        while 线程开关["状态"] == "开启":
            #threading.Thread(target=屏幕截图函数).start()
            工作线程.UPDATE_SIGNAL.emit(('阅世',))
            工作线程.UPDATE_SIGNAL.emit(('确定点位',))

            工作线程.UPDATE_SIGNAL.emit(('左方豆豆结算',))
            工作线程.UPDATE_SIGNAL.emit(('右方豆豆结算',))

            工作线程.UPDATE_SIGNAL.emit(('自动记录秘卷',))
            工作线程.UPDATE_SIGNAL.emit(('自动记录通灵',))



            time.sleep(每秒检测时间["检测间隔"])  # 每X秒检测一次
#信号接口
def 处理线程信号函数(触发函数线程参数):
    触发函数名称 = 触发函数线程参数[0]
    if 触发函数名称 == "确定点位":
        屏幕确定点位函数()
    elif 触发函数名称 == "阅世":
        屏幕截图函数()
    elif 触发函数名称 == "书写天命":
        终章()
    elif 触发函数名称 == '更新左方文本':
        _, 文本内容, 文本颜色, 背景颜色 = 触发函数线程参数
        更新左侧文本(文本内容, 文本颜色, 背景颜色)
    elif 触发函数名称 == '更新右方文本':
        _, 文本内容, 文本颜色, 背景颜色 = 触发函数线程参数
        更新右侧文本(文本内容, 文本颜色, 背景颜色)
    elif 触发函数名称 == '开始左方倒计时':
        _, 父窗口 = 触发函数线程参数
        开始倒计时_左方(父窗口)
    elif 触发函数名称 == '开始右方倒计时':
        _, 父窗口 = 触发函数线程参数
        开始倒计时_右方(父窗口)
    elif 触发函数名称 == '检测左方豆一':
        左方第一个豆判定颜色()
    elif 触发函数名称 == '检测左方豆二':
        左方第二个豆判定颜色()
    elif 触发函数名称 == '检测左方豆三':
        左方第三个豆判定颜色()
    elif 触发函数名称 == '检测左方豆四':
        左方第四个豆判定颜色()
    elif 触发函数名称 == '检测左方豆五':
        左方第五个豆判定颜色()
    elif 触发函数名称 == '检测左方豆六':
        左方第六个豆判定颜色()
    elif 触发函数名称 == '检测右方豆一':
        右方第一个豆判定颜色()
    elif 触发函数名称 == '检测右方豆二':
        右方第二个豆判定颜色()
    elif 触发函数名称 == '检测右方豆三':
        右方第三个豆判定颜色()
    elif 触发函数名称 == '检测右方豆四':
        右方第四个豆判定颜色()
    elif 触发函数名称 == '检测右方豆五':
        右方第五个豆判定颜色()
    elif 触发函数名称 == '检测右方豆六':
        右方第六个豆判定颜色()
    elif 触发函数名称 == '左方豆豆结算':
        左方所有豆豆结算()
    elif 触发函数名称 == '右方豆豆结算':
        右方所有豆豆结算()
    elif 触发函数名称 == "自动记录秘卷":
        自动记录秘卷()
    elif 触发函数名称 == "自动记录通灵":
        自动记录通灵()
    elif 触发函数名称 == '冬日花火技能':
        _, 花火招数 = 触发函数线程参数
        花火线程(花火招数)
    elif 触发函数名称 == '青年长门五遁':
        _, 遁术属性 = 触发函数线程参数
        青年长门五遁(遁术属性)
    elif 触发函数名称 == "须佐佐助天照":
        须佐佐助天照判定()
    elif 触发函数名称 == "漂泊佩恩畜生道":
        漂泊佩恩畜生道子技能()
    elif 触发函数名称 == '触发替身':
        _, 替身方位 = 触发函数线程参数
        替身触发后续(替身方位)
    elif 触发函数名称 == "单检测":
        _,当前方位 =触发函数线程参数
        自动_技能触发_单检测(当前方位)
    elif 触发函数名称 == "双检测":
        _,当前方位 =触发函数线程参数
        自动_技能触发_双检测(当前方位)
    elif 触发函数名称 == "二检测":
        _,当前方位 =触发函数线程参数
        自动_技能触发_二检测(当前方位)
    elif 触发函数名称 == "同检测":
        _,当前方位 =触发函数线程参数
        自动_技能触发_同检测(当前方位)
    elif 触发函数名称 == "集检测":
        _,当前方位 =触发函数线程参数
        自动_技能触发_集检测(当前方位)
    elif 触发函数名称 == "长十郎切刀":
        _, 当前方位 = 触发函数线程参数
        自动_技能触发_长十郎(当前方位)
    elif 触发函数名称 == "停止点穴":
        _, 当前方位 = 触发函数线程参数
        自动_停止点穴_忍战宁次(当前方位)
    elif 触发函数名称 == "即时触发":
        自动_即时触发()

#线程实际
def 线程实际创建在主窗口():
    global 工作线程
    工作线程 = 工作者大线程类()
    工作线程.UPDATE_SIGNAL.connect(处理线程信号函数)
    工作线程.start()
#终章
def 终章():
    线程开关["状态"]="关闭"
    time.sleep(1)
    app.quit()
    print("莫以为光,就会被黑暗吞噬!")
    sys.exit(233)
# 设定用户为左方函数
def 设定用户为左方():
    我方位置字典["我方位置"] = "左方"
    print("当前我方是左方")
# 设定用户为右方函数
def 设定用户为右方():
    我方位置字典["我方位置"] = "右方"
    print("当前我方是右方")
#主窗口相关部分
def 创建窗口():
    global app
    app = QApplication(sys.argv)

    # 定义可用的图标路径列表
    图标路径列表 = [
        路径修正("文件/icon/1.ico"),
        路径修正("文件/icon/2.ico"),
        路径修正("文件/icon/3.ico"),
        路径修正("文件/icon/4.ico"),
        路径修正("文件/icon/5.ico"),
        路径修正("文件/icon/6.ico"),
        # 你可以继续添加其他图标路径
    ]

    # 随机选择一个图标路径
    随机图标路径 = random.choice(图标路径列表)

    窗口图标 = QIcon(随机图标路径)
    #app.setWindowIcon(窗口图标)
    global 窗口_根窗口
    窗口_根窗口 = QWidget()
    窗口_根窗口.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
    窗口_根窗口.setAttribute(Qt.WA_TranslucentBackground)
    窗口_根窗口.setGeometry(810, 190, 300, 150)
    窗口_根窗口.setWindowTitle("璃奈板")
    窗口_根窗口.setWindowIcon(窗口图标)

    # 添加鼠标事件处理
    def 鼠标按下事件(event):
        if event.button() == Qt.LeftButton:
            窗口_根窗口._鼠标起始位置 = event.globalPos() - 窗口_根窗口.frameGeometry().topLeft()
            event.accept()

    def 鼠标移动事件(event):
        if event.buttons() == Qt.LeftButton:
            窗口_根窗口.move(event.globalPos() - 窗口_根窗口._鼠标起始位置)
            event.accept()

    窗口_根窗口.mousePressEvent = 鼠标按下事件
    窗口_根窗口.mouseMoveEvent = 鼠标移动事件

    # 获取图片路径并随机选择一张图片
    try:
        if hasattr(sys, '_MEIPASS'):
            图片目录 = os.path.join(sys._MEIPASS, '文件', 'BG')
        else:
            图片目录 = os.path.join(os.path.dirname(sys.argv[0]), '文件', 'BG')

        if not os.path.exists(图片目录):
            raise FileNotFoundError(f"图片目录不存在: {图片目录}")

        图片文件列表 = [f for f in os.listdir(图片目录) if f.endswith('.png')]
        if not 图片文件列表:
            raise FileNotFoundError("没有找到任何PNG格式的图片文件")

        随机图片 = random.choice(图片文件列表)
        图片路径 = os.path.join(图片目录, 随机图片)
    except Exception as e:
        print(f"错误: {e}")
        sys.exit(1)

    # 设置背景图片
    背景标签 = QLabel(窗口_根窗口)
    背景标签.setGeometry(0, 0, 300, 150)
    try:
        背景图片 = QPixmap(图片路径).scaled(300, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        背景标签.setPixmap(背景图片)
    except Exception as e:
        print(f"设置背景图片时出错: {e}")
        sys.exit(1)

    # 创建按钮一：倒计时开始按钮_左方
    倒计时开始按钮_左方 = QPushButton("关于", 窗口_根窗口)
    倒计时开始按钮_左方.setGeometry(0, 120, 50, 30)
    倒计时开始按钮_左方.setStyleSheet("background-color: #ffffff; color: #000000;")
    倒计时开始按钮_左方.setFont(窗口使用字体)
    倒计时开始按钮_左方.clicked.connect(lambda: 创建窗口关于())

    # 创建按钮二：倒计时开始按钮_右方
    倒计时开始按钮_右方 = QPushButton("教程", 窗口_根窗口)
    倒计时开始按钮_右方.setGeometry(250, 120, 50, 30)
    倒计时开始按钮_右方.setStyleSheet("background-color: #83FF80; color: #000000;")
    倒计时开始按钮_右方.setFont(窗口使用字体)
    倒计时开始按钮_右方.clicked.connect(lambda: 创建窗口教程())

    # 创建左侧文本显示
    global 左侧文本显示  # 声明为全局变量以便其他函数访问
    左侧文本显示 = QLabel("BY 凤灯幽夜", 窗口_根窗口)
    左侧文本显示.setGeometry(0, 0, 150, 30)
    左侧文本显示.setFont(窗口使用稍大字体)
    左侧文本显示.setAlignment(Qt.AlignCenter)
    左侧文本显示.setStyleSheet("background-color: #ffffff; color: #EC137A;")
    左侧文本显示.show()

    # 创建右侧文本显示
    global 右侧文本显示  # 声明为全局变量以便其他函数访问
    右侧文本显示 = QLabel("本软件纯免费", 窗口_根窗口)
    右侧文本显示.setGeometry(150, 0, 150, 30)
    右侧文本显示.setFont(窗口使用稍大字体)
    右侧文本显示.setAlignment(Qt.AlignCenter)
    右侧文本显示.setStyleSheet("background-color: #ffffff; color: #EC137A;")
    右侧文本显示.show()

    # 创建设置左方按钮
    设置左方按钮 = QPushButton("左方", 窗口_根窗口)
    设置左方按钮.setGeometry(100, 120, 50, 30)
    设置左方按钮.setStyleSheet("background-color: #7CDFEC; color: #000000;")
    设置左方按钮.setFont(窗口使用字体)
    设置左方按钮.clicked.connect(设定用户为左方)

    # 创建设置右方按钮
    设置右方按钮 = QPushButton("右方", 窗口_根窗口)
    设置右方按钮.setGeometry(150, 120, 50, 30)
    设置右方按钮.setStyleSheet("background-color: #E06582; color: #000000;")
    设置右方按钮.setFont(窗口使用字体)
    设置右方按钮.clicked.connect(设定用户为右方)

    # 创建关闭窗口按钮
    关闭窗口按钮 = QPushButton("关闭", 窗口_根窗口)
    关闭窗口按钮.setGeometry(200, 120, 50, 30)
    关闭窗口按钮.setStyleSheet("background-color: #A285DD; color: #000000;")
    关闭窗口按钮.setFont(窗口使用字体)
    关闭窗口按钮.clicked.connect(终章)

    # 创建打开子窗口按钮
    打开子窗口按钮 = QPushButton("设置", 窗口_根窗口)
    打开子窗口按钮.setGeometry(50, 120, 50, 30)
    打开子窗口按钮.setStyleSheet("background-color: #FFFE6C; color: #000000;")
    打开子窗口按钮.setFont(窗口使用字体)
    打开子窗口按钮.clicked.connect(子窗口创建)


    def 键盘事件(具体事件):
        # 检查是否按下了Ctrl键
        global 工作线程
        if 具体事件.modifiers() == Qt.ControlModifier:
            if 具体事件.key() == Qt.Key_0:
                # 在这里处理 Ctrl+0 组合键的事件
                print("荡尽芜杂")
                # 举例：调用相关函数
                工作线程.UPDATE_SIGNAL.emit(("书写天命",),)
        else:
            if 具体事件.key() == Qt.Key_Q:
                开始倒计时_左方(窗口_根窗口)
            elif 具体事件.key() == Qt.Key_E:
                开始倒计时_右方(窗口_根窗口)
            elif 具体事件.key() == Qt.Key_Z:
                更新左侧文本("已更新", "#8595DD", "#CE85DD")
            elif 具体事件.key() == Qt.Key_C:
                threading.Thread(target=更新右侧文本, args=("更新后", "#7AFB04", "#F5FB04")).start()
            elif 具体事件.key() == Qt.Key_Y:
                工作线程.UPDATE_SIGNAL.emit(('更新左方文本', "◇◇◇◇    ", "#00d29e", "#f8f9fb",))
            elif 具体事件.key() == Qt.Key_T:
                工作线程.UPDATE_SIGNAL.emit(('开始左方倒计时', 窗口_根窗口,))
    #窗口_根窗口.keyPressEvent = 键盘事件

    通灵秘卷显示标签()

    线程实际创建在主窗口()

    键盘监听线程 = threading.Thread(target=启动键盘监听)
    键盘监听线程.daemon = True  # 设置为守护线程，这样它会在主程序退出时自动结束
    键盘监听线程.start()


    窗口_根窗口.show()


    sys.exit(app.exec_())
def 创建倒计时标签(父窗口, x_position):
    # 检查现有标签并找到最顶层可用位置
    existing_labels = [child for child in 父窗口.children() if isinstance(child, QLabel) and child.text() != "" and child.x() == x_position]
    occupied_positions = set(label.y() for label in existing_labels)

    y_position = 30
    while y_position in occupied_positions:
        y_position += 30

    倒计时标签 = QLabel("哇袄!", 父窗口)
    倒计时标签.setFont(窗口使用稍大字体)
    倒计时标签.setGeometry(x_position, y_position, 50, 30)  # 固定标签大小为50x30
    倒计时标签.setAlignment(Qt.AlignVCenter)  # 修改文本对齐方式为居中
    倒计时标签.setStyleSheet("background-color: #FFDCF6; color: #25B7A8;")  # 设置背景颜色和文本颜色
    倒计时标签.show()

    剩余时间 = 倒计时所用时间  # 15.0秒，单位为 0.1 秒

    def 更新倒计时():
        nonlocal 剩余时间
        剩余时间 -= 1
        倒计时标签.setText(f"{剩余时间 / 10:.1f}")
        if 剩余时间 <= 0:
            倒计时标签.deleteLater()
            倒计时器.stop()

    倒计时器 = QTimer(父窗口)
    倒计时器.timeout.connect(更新倒计时)
    倒计时器.start(100)  # 每0.1秒更新一次
def 开始倒计时_左方(父窗口):
    创建倒计时标签(父窗口, 0)
    print("左方进入替身冷却")
def 开始倒计时_右方(父窗口):
    创建倒计时标签(父窗口, 250)
    print("右方进入替身冷却")
def 更新左侧文本(文本, 文本颜色, 背景颜色):
    global 左侧文本显示
    左侧文本显示.setText(文本)
    左侧文本显示.setStyleSheet(f"background-color: {背景颜色}; color: {文本颜色};")
def 更新右侧文本(文本, 文本颜色, 背景颜色):
    global 右侧文本显示
    右侧文本显示.setText(文本)
    右侧文本显示.setStyleSheet(f"background-color: {背景颜色}; color: {文本颜色};")
def 通灵秘卷显示标签():
    global 左通灵显示标签
    左通灵显示标签 = QLabel(窗口_根窗口)
    左通灵显示标签.setGeometry(50, 60, 90, 30)
    #左通灵显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
    global 右通灵显示标签
    右通灵显示标签 = QLabel(窗口_根窗口)
    右通灵显示标签.setGeometry(160, 60, 90, 30)
    #右通灵显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")

    global 左秘卷一显示标签
    左秘卷一显示标签 = QLabel(窗口_根窗口)
    左秘卷一显示标签.setGeometry(110, 90, 30, 30)
    #左秘卷一显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
    global 左秘卷二显示标签
    左秘卷二显示标签 = QLabel(窗口_根窗口)
    左秘卷二显示标签.setGeometry(80, 90, 30, 30)
    #左秘卷二显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
    global 左秘卷三显示标签
    左秘卷三显示标签 = QLabel(窗口_根窗口)
    左秘卷三显示标签.setGeometry(50, 90, 30, 30)
    #左秘卷三显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")

    global 右秘卷一显示标签
    右秘卷一显示标签 = QLabel(窗口_根窗口)
    右秘卷一显示标签.setGeometry(160, 90, 30, 30)
    #右秘卷一显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
    global 右秘卷二显示标签
    右秘卷二显示标签 = QLabel(窗口_根窗口)
    右秘卷二显示标签.setGeometry(190, 90, 30, 30)
    #右秘卷二显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
    global 右秘卷三显示标签
    右秘卷三显示标签 = QLabel(窗口_根窗口)
    右秘卷三显示标签.setGeometry(220, 90, 30, 30)
    #右秘卷三显示标签.setStyleSheet("background-color: #000000; color: #EC137A;")
def 秘卷截图():
    左秘卷一截取区域 = QRect(记牌位置字典["左秘卷一"][0], 记牌位置字典["左秘卷一"][1], 57, 57, )
    左秘卷一截图裁剪 = 截屏字典["截屏内容"].copy(左秘卷一截取区域)
    左秘卷一截图裁剪 = 左秘卷一截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    左秘卷一显示标签.setPixmap(左秘卷一截图裁剪)
    左秘卷一显示标签.show()
    左秘卷二截取区域 = QRect(记牌位置字典["左秘卷二"][0], 记牌位置字典["左秘卷二"][1], 57, 57, )
    左秘卷二截图裁剪 = 截屏字典["截屏内容"].copy(左秘卷二截取区域)
    左秘卷二截图裁剪 = 左秘卷二截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    左秘卷二显示标签.setPixmap(左秘卷二截图裁剪)
    左秘卷二显示标签.show()
    左秘卷三截取区域 = QRect(记牌位置字典["左秘卷三"][0], 记牌位置字典["左秘卷三"][1], 57, 57, )
    左秘卷三截图裁剪 = 截屏字典["截屏内容"].copy(左秘卷三截取区域)
    左秘卷三截图裁剪 = 左秘卷三截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    左秘卷三显示标签.setPixmap(左秘卷三截图裁剪)
    左秘卷三显示标签.show()

    右秘卷一截取区域 = QRect(记牌位置字典["右秘卷一"][0], 记牌位置字典["右秘卷一"][1], 57, 57, )
    右秘卷一截图裁剪 = 截屏字典["截屏内容"].copy(右秘卷一截取区域)
    右秘卷一截图裁剪 = 右秘卷一截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    右秘卷一显示标签.setPixmap(右秘卷一截图裁剪)
    右秘卷一显示标签.show()
    右秘卷二截取区域 = QRect(记牌位置字典["右秘卷二"][0], 记牌位置字典["右秘卷二"][1], 57, 57, )
    右秘卷二截图裁剪 = 截屏字典["截屏内容"].copy(右秘卷二截取区域)
    右秘卷二截图裁剪 = 右秘卷二截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    右秘卷二显示标签.setPixmap(右秘卷二截图裁剪)
    右秘卷二显示标签.show()
    右秘卷三截取区域 = QRect(记牌位置字典["右秘卷三"][0], 记牌位置字典["右秘卷三"][1], 57, 57, )
    右秘卷三截图裁剪 = 截屏字典["截屏内容"].copy(右秘卷三截取区域)
    右秘卷三截图裁剪 = 右秘卷三截图裁剪.scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    右秘卷三显示标签.setPixmap(右秘卷三截图裁剪)
    右秘卷三显示标签.show()
def 通灵截图():
    左通灵截取区域 = QRect(记牌位置字典["左通灵"][0], 记牌位置字典["左通灵"][1], 360, 120, )
    左通灵截图裁剪 = 截屏字典["截屏内容"].copy(左通灵截取区域)
    左通灵截图裁剪 = 左通灵截图裁剪.scaled(90, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    左通灵显示标签.setPixmap(左通灵截图裁剪)
    左通灵显示标签.show()

    右通灵截取区域 = QRect(记牌位置字典["右通灵"][0], 记牌位置字典["右通灵"][1], 360, 120, )
    右通灵截图裁剪 = 截屏字典["截屏内容"].copy(右通灵截取区域)
    右通灵截图裁剪 = 右通灵截图裁剪.scaled(90, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    右通灵显示标签.setPixmap(右通灵截图裁剪)
    右通灵显示标签.show()
#子窗口相关部分
def 子窗口创建():
    global 窗口_子窗口
    # 检查子窗口是否已存在
    if 窗口_子窗口 is None:
        # 创建子窗口
        窗口_子窗口 = QWidget()
        图标路径列表 = [
            路径修正("文件/icon/1.ico"),
            路径修正("文件/icon/2.ico"),
            路径修正("文件/icon/3.ico"),
            路径修正("文件/icon/4.ico"),
            路径修正("文件/icon/5.ico"),
            路径修正("文件/icon/6.ico"),
            # 你可以继续添加其他图标路径
        ]
        随机图标路径 = random.choice(图标路径列表)
        窗口图标 = QIcon(随机图标路径)
        窗口_子窗口.setWindowIcon(窗口图标)

        窗口_子窗口.setWindowFlags(Qt.FramelessWindowHint)
        窗口_子窗口.setGeometry(0, 0, 1050, 1050)
        窗口_子窗口.setWindowTitle("设置开关界面")
        窗口_子窗口.setStyleSheet("background-color: #f0f0f0;")

        # 添加鼠标事件处理
        def 鼠标按下事件(event):
            if event.button() == Qt.LeftButton:
                窗口_子窗口._鼠标起始位置 = event.globalPos() - 窗口_子窗口.frameGeometry().topLeft()
                event.accept()
        def 鼠标移动事件(event):
            if event.buttons() == Qt.LeftButton:
                窗口_子窗口.move(event.globalPos() - 窗口_子窗口._鼠标起始位置)
                event.accept()
        窗口_子窗口.mousePressEvent = 鼠标按下事件
        窗口_子窗口.mouseMoveEvent = 鼠标移动事件

        子窗口速度倍率调整()
        子窗口模拟器调整()
        子窗口模式切换()
        子窗口一叶障开关()
        子窗口大封印术()
        子窗口范围显示()
        子窗口关闭按钮()
        创建组件(窗口_子窗口)
        # 使用 for 循环批量创建图片与按钮
        for 参数 in 子窗口控件参数列表:
            文件路径, 按钮名称, X坐标位置, Y坐标位置, 技能说明 = 参数
            # 将 X, Y 坐标调整为实际位置，例如每个图片和按钮之间有一定的间距
            实际X坐标位置 = X坐标位置 * 75
            实际Y坐标位置 = Y坐标位置 * 105
            批量创建图片与按钮(窗口_子窗口, 文件路径, 按钮名称, 实际X坐标位置, 实际Y坐标位置, 技能说明)
        窗口_子窗口.show()
    else:
        # 切换子窗口的可见性
        if 窗口_子窗口.isVisible():
            窗口_子窗口.hide()
        else:
            窗口_子窗口.show()
            # 确保子窗口在显示时保持置顶一次
            窗口_子窗口.raise_()
def 批量创建图片与按钮(对应窗口, 文件路径, 按钮名称, X坐标位置, Y坐标位置, 技能说明):
    图片标签 = QLabel(对应窗口)
    # 动态获取资源路径
    if hasattr(sys, '_MEIPASS'):
        文件路径 = os.path.join(sys._MEIPASS, 文件路径)
    图片 = QPixmap(文件路径).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    图片标签.setPixmap(图片)
    图片标签.setGeometry(X坐标位置, Y坐标位置, 75, 75)
    图片标签.setObjectName(按钮名称 + "_图片")
    图片标签.show()

    # 创建对应的按钮并统一大小为 75x30
    按钮 = QPushButton(按钮名称, 对应窗口)
    按钮.setGeometry(X坐标位置, Y坐标位置 + 75 , 75, 30)
    按钮.setObjectName(按钮名称 + "_按钮")
    按钮.setStyleSheet("background-color: #ffffff;color: #000000;border: 2px solid #FF2EE7;")
    调整字体(按钮)
    按钮.show()

    # 按钮可以设置点击事件，这里暂时不设置
    按钮.clicked.connect(lambda: 各窗口按钮(按钮, 文件路径))

    # 技能说明暂时不调用，可以用于以后扩展
def 调整字体(按钮):
    # 初始字体
    初始字体大小 = 13
    字体 = QFont("黑体", int(初始字体大小 / DPI大小))
    按钮.setFont(字体)

    字体测量 = QFontMetrics(字体)
    文本宽度 = 字体测量.width(按钮.text())
    按钮宽度 = 按钮.width()

    # 调整字体大小以适应按钮宽度
    while 文本宽度 > 按钮宽度 and 字体.pointSize() > 1:
        字体.setPointSize(字体.pointSize() - 1)
        字体测量 = QFontMetrics(字体)
        文本宽度 = 字体测量.width(按钮.text())

    按钮.setFont(字体)
def 各窗口按钮(对应按钮, 文件路径):
    # 去掉文件路径中的文件夹和后缀，仅保留文件名
    对应按钮.setFont(窗口使用稍小字体)
    if 对应按钮.text() != "开启中":
        对应按钮.setText("开启中")
        对应名称 = os.path.splitext(os.path.basename(文件路径))[0]
        状态开关字典[f"状态_{对应名称}"] = "开启"
        对应按钮.setStyleSheet("background-color: #ffffff; color: #00FF34;border: 2px solid #00FF34;")
    elif 对应按钮.text() == "开启中":
        对应按钮.setText("关闭中")
        对应名称 = os.path.splitext(os.path.basename(文件路径))[0]
        状态开关字典[f"状态_{对应名称}"] = "关闭"
        对应按钮.setStyleSheet("background-color: #ffffff; color: #FF0000;border: 2px solid #FF0000;")
    print(f"当前状态为{状态开关字典}")
def 子窗口速度倍率调整():
    # 创建新的图片标签和按钮
    速度倍率图片标签 = QLabel(窗口_子窗口)
    # 检查是否在打包的exe环境中
    if 每秒检测时间["检测间隔"] == 0.1:
        速度倍率文本 = "一十/秒"
        速度倍率边框 = "background-color:#ffffff; color: #00C658;border: 2px solid #00C658;"
        图片路径 = 路径修正("文件/C.png")
    elif 每秒检测时间["检测间隔"] == 0.05:
        速度倍率文本 = "二十/秒"
        速度倍率边框 = "background-color:#ffffff ; color: #3C8BFF;border: 2px solid #3C8BFF;"
        图片路径 = 路径修正("文件/B.png")
    elif 每秒检测时间["检测间隔"] == 0.02:
        速度倍率文本 = "五十/秒"
        速度倍率边框 = "background-color:#ffffff ; color: #C63EFF;border: 2px solid #C63EFF;"
        图片路径 = 路径修正("文件/A.png")
    elif 每秒检测时间["检测间隔"] == 0.01:
        速度倍率文本 = "一百/秒"
        速度倍率边框 = "background-color:#ffffff; color: #FFCB00;border: 2px solid #FFCB00;"
        图片路径 = 路径修正("文件/S.png")
    else:
        速度倍率文本 = "一十/秒"
        速度倍率边框 = "background-color:#ffffff; color: #00C658;border: 2px solid #00C658;"
        图片路径 = 路径修正("文件/C.png")

    速度倍率图片标签.setPixmap(QPixmap(图片路径).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))
    速度倍率图片标签.setGeometry(0, 0, 75, 75)
    速度倍率图片标签.show()

    速度倍率按钮 = QPushButton(速度倍率文本, 窗口_子窗口)
    速度倍率按钮.setGeometry(0, 75, 75, 30)
    速度倍率按钮.setStyleSheet(速度倍率边框)
    速度倍率按钮.setFont(窗口使用稍小字体)
    速度倍率按钮.show()
    速度倍率按钮.clicked.connect(lambda: 速度倍率调整(速度倍率图片标签, 速度倍率按钮))
def 速度倍率调整(速度倍率图片标签, 速度倍率按钮):
    global 每秒检测时间
    if 速度倍率按钮.text() == "一百/秒":
        速度倍率图片标签.setPixmap(
            QPixmap(路径修正("文件/A.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        速度倍率按钮.setText("五十/秒")
        速度倍率按钮.setStyleSheet("background-color:#ffffff ; color: #C63EFF;border: 2px solid #C63EFF;")
        每秒检测时间 = {"检测间隔": 0.02}
    elif 速度倍率按钮.text() == "五十/秒":
        速度倍率图片标签.setPixmap(
            QPixmap(路径修正("文件/B.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        速度倍率按钮.setText("二十/秒")
        速度倍率按钮.setStyleSheet("background-color:#ffffff ; color: #3C8BFF;border: 2px solid #3C8BFF;")
        每秒检测时间 = {"检测间隔": 0.05}
    elif 速度倍率按钮.text() == "二十/秒":
        速度倍率图片标签.setPixmap(
            QPixmap(路径修正("文件/C.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        速度倍率按钮.setText("一十/秒")
        速度倍率按钮.setStyleSheet("background-color:#ffffff; color: #00C658;border: 2px solid #00C658;")
        每秒检测时间 = {"检测间隔": 0.1}
    elif 速度倍率按钮.text() == "一十/秒":
        速度倍率图片标签.setPixmap(
            QPixmap(路径修正("文件/S.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        速度倍率按钮.setText("一百/秒")
        速度倍率按钮.setStyleSheet("background-color:#ffffff; color: #FFCB00;border: 2px solid #FFCB00;")
        每秒检测时间 = {"检测间隔": 0.01}
    print(f"当前为{每秒检测时间['检测间隔']}秒检测一次")
def 子窗口模拟器调整():
    # 创建新的图片标签和按钮
    global 模拟器按钮文本,模拟器按钮边框
    模拟器按钮文本 = "MEMU"
    模拟器按钮边框 = "background-color:#ffffff; color: #f87c67;border: 2px solid #f87c67;"
    模拟器设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示模拟器的图片
    if 使用模拟器 == "MEMU":
        模拟器按钮文本="MEMU"
        模拟器按钮边框="background-color:#ffffff; color: #f87c67;border: 2px solid #f87c67;"
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/MEMU.png")).scaled(75, 75, Qt.KeepAspectRatio,Qt.SmoothTransformation))
    elif 使用模拟器 == "LD":
        模拟器按钮文本="LD"
        模拟器按钮边框="background-color:#ffffff ; color: #f4c51f;border: 2px solid #f4c51f;"
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/LD.png")).scaled(75, 75, Qt.KeepAspectRatio,Qt.SmoothTransformation))
    elif 使用模拟器 == "MUMU":
        模拟器按钮文本="MUMU"
        模拟器按钮边框="background-color:#ffffff ; color: #0aa3e7;border: 2px solid #0aa3e7;"
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/MUMU.png")).scaled(75, 75, Qt.KeepAspectRatio,Qt.SmoothTransformation))
    elif 使用模拟器 == "NOX":
        模拟器按钮文本="NOX"
        模拟器按钮边框="background-color:#ffffff; color: #5a47ef;border: 2px solid #5a47ef;"
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/NOX.png")).scaled(75, 75, Qt.KeepAspectRatio,Qt.SmoothTransformation))
    else:
        模拟器按钮文本 = "MEMU"
        模拟器按钮边框 = "background-color:#ffffff; color: #f87c67;border: 2px solid #f87c67;"
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/MEMU.png")).scaled(75, 75, Qt.KeepAspectRatio,Qt.SmoothTransformation))

    模拟器设置图片标签.setGeometry(150, 0, 75, 75)  # 设置标签的位置和大小
    模拟器设置图片标签.show()  # 显示标签

    模拟器设置按钮 = QPushButton(模拟器按钮文本, 窗口_子窗口)  # 创建一个按钮，初始文字为MEMU
    模拟器设置按钮.setGeometry(150, 75, 75, 30)  # 设置按钮的位置和大小
    模拟器设置按钮.setStyleSheet(模拟器按钮边框)  # 设置按钮的样式
    模拟器设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    模拟器设置按钮.show()  # 显示按钮
    模拟器设置按钮.clicked.connect(lambda: 模拟器设置调整(模拟器设置图片标签, 模拟器设置按钮))  # 连接按钮点击事件到模拟器设置调整函数
def 模拟器设置调整(模拟器设置图片标签, 模拟器设置按钮):
    # 根据按钮当前的文字内容，调整图片和按钮的样式及文字
    if 模拟器设置按钮.text() == "MEMU":
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/LD.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为LD
        模拟器设置按钮.setText("LD")  # 更新按钮文字为LD
        模拟器设置按钮.setStyleSheet("background-color:#ffffff ; color: #f4c51f;border: 2px solid #f4c51f;")  # 更新按钮样式
        整合大字典.update(雷电模拟器)
    elif 模拟器设置按钮.text() == "LD":
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/MUMU.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为MUMU
        模拟器设置按钮.setText("MUMU")  # 更新按钮文字为MUMU
        模拟器设置按钮.setStyleSheet("background-color:#ffffff ; color: #0aa3e7;border: 2px solid #0aa3e7;")  # 更新按钮样式
        整合大字典.update(MUMU模拟器)
    elif 模拟器设置按钮.text() == "MUMU":
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/NOX.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为NOX
        模拟器设置按钮.setText("NOX")  # 更新按钮文字为NOX
        模拟器设置按钮.setStyleSheet("background-color:#ffffff; color: #5a47ef;border: 2px solid #5a47ef;")  # 更新按钮样式
        整合大字典.update(夜神模拟器)
    elif 模拟器设置按钮.text() == "NOX":
        模拟器设置图片标签.setPixmap(QPixmap(路径修正("文件/MEMU.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为MEMU
        模拟器设置按钮.setText("MEMU")  # 更新按钮文字为MEMU
        模拟器设置按钮.setStyleSheet("background-color:#ffffff; color: #f87c67;border: 2px solid #f87c67;")  # 更新按钮样式#具体实现
        整合大字典.update(逍遥模拟器)
def 子窗口模式切换():
    # 创建新的图片标签和按钮
    决斗场设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示决斗场的图片
    决斗场设置图片标签.setPixmap(QPixmap(路径修正("文件/决斗场设置.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置初始图片为MEMU
    决斗场设置图片标签.setGeometry(75, 0, 75, 75)  # 设置标签的位置和大小
    决斗场设置图片标签.show()  # 显示标签

    决斗场设置按钮 = QPushButton("决斗场", 窗口_子窗口)  # 创建一个按钮，初始文字为MEMU
    决斗场设置按钮.setGeometry(75, 75, 75, 30)  # 设置按钮的位置和大小
    决斗场设置按钮.setStyleSheet("background-color:#ffffff; color: #5ACD32;border: 2px solid #5ACD32;")  # 设置按钮的样式
    决斗场设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    决斗场设置按钮.show()  # 显示按钮
    决斗场设置按钮.clicked.connect(lambda: 模式切换(决斗场设置图片标签, 决斗场设置按钮))
def 模式切换(决斗场设置图片标签, 决斗场设置按钮):
    global 模式暂且占位
    # 根据按钮当前的文字内容，调整图片和按钮的样式及文字
    if 决斗场设置按钮.text() == "决斗场":
        决斗场设置图片标签.setPixmap(
            QPixmap(路径修正("文件/训练营设置.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为LD
        决斗场设置按钮.setText("训练营")  # 更新按钮文字为LD
        决斗场设置按钮.setStyleSheet("background-color:#ffffff ; color: #E45F1B;border: 2px solid #E45F1B;")  # 更新按钮样式
        模式暂且占位 = "训练营"
    elif 决斗场设置按钮.text() == "训练营":
        决斗场设置图片标签.setPixmap(
            QPixmap(路径修正("文件/决斗场设置.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置新图片为MUMU
        决斗场设置按钮.setText("决斗场")  # 更新按钮文字为MUMU
        决斗场设置按钮.setStyleSheet("background-color:#ffffff ; color: #5ACD32;border: 2px solid #5ACD32;")  # 更新按钮样式
        模式暂且占位 = "决斗场"
def 子窗口一叶障开关():
    # 创建新的图片标签和按钮
    一叶障设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示一叶障的图片
    一叶障设置图片标签.setPixmap(QPixmap(路径修正("文件/一叶障.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  # 设置初始图片为MEMU
    一叶障设置图片标签.setGeometry(750, 0, 75, 75)  # 设置标签的位置和大小
    一叶障设置图片标签.show()  # 显示标签

    一叶障设置按钮 = QPushButton("一叶障", 窗口_子窗口)
    一叶障设置按钮.setGeometry(750, 75, 75, 30)  # 设置按钮的位置和大小
    一叶障设置按钮.setStyleSheet("background-color:#ffffff; color: #00C048;border: 2px solid #00C048;")  # 设置按钮的样式
    一叶障设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    一叶障设置按钮.clicked.connect(lambda: 一叶障显示())
    一叶障设置按钮.show()  # 显示按钮
def 一叶障显示():
    global 一叶障窗口, 一叶障窗口可见
    print("一叶障显示函数被调用")
    if 一叶障窗口 is None:
        # 首次调用，创建新窗口
        一叶障图片路径 = 路径修正("文件/超级一叶障.png")
        if not os.path.exists(一叶障图片路径):
            print(f"错误：文件 {一叶障图片路径} 不存在")
            return

        try:
            # 创建一个顶层窗口
            一叶障窗口 = QtWidgets.QWidget()
            一叶障窗口.setWindowFlags(
                QtCore.Qt.WindowStaysOnTopHint |
                QtCore.Qt.FramelessWindowHint |
                QtCore.Qt.Tool
            )
            一叶障窗口.setAttribute(QtCore.Qt.WA_TranslucentBackground)
            一叶障窗口.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)

            # 获取屏幕大小
            屏幕 = QtWidgets.QApplication.primaryScreen().size()
            屏幕宽度 = 屏幕.width()
            屏幕高度 = 屏幕.height()

            # 加载图片并缩放到屏幕大小
            原始一叶障图片 = QtGui.QPixmap(一叶障图片路径)
            if 原始一叶障图片.isNull():
                print(f"错误：无法加载图片 {一叶障图片路径}")
                return
            缩放一叶障图片 = 原始一叶障图片.scaled(屏幕宽度, 屏幕高度, QtCore.Qt.KeepAspectRatioByExpanding,QtCore.Qt.SmoothTransformation)

            # 创建标签并设置图片
            一叶障图片标签 = QtWidgets.QLabel(一叶障窗口)
            一叶障图片标签.setPixmap(缩放一叶障图片)
            一叶障图片标签.setGeometry(0, 0, 屏幕宽度, 屏幕高度)
            一叶障图片标签.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)  # 使图片标签也可穿透

            # 设置窗口大小为屏幕大小
            一叶障窗口.setGeometry(0, 0, 屏幕宽度, 屏幕高度)

            # 显示窗口
            一叶障窗口.show()
            一叶障窗口可见 = True

            print(f"一叶障窗口已创建并显示，大小为 {屏幕宽度}x{屏幕高度}")

        except Exception as e:
            print(f"发生错误：{str(e)}")
    else:
        # 窗口已存在，切换可见性
        if 一叶障窗口可见:
            一叶障窗口.hide()
            一叶障窗口可见 = False
            print("一叶障窗口已隐藏")
        else:
            一叶障窗口.show()
            一叶障窗口可见 = True
            print("一叶障窗口已显示")
def 子窗口范围显示():
    # 创建新的图片标签和按钮
    范围显示设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示范围显示的图片
    范围显示设置图片标签.setPixmap(QPixmap(路径修正("文件/范围显示.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  #
    范围显示设置图片标签.setGeometry(825, 0, 75, 75)  # 设置标签的位置和大小
    范围显示设置图片标签.show()  # 显示标签

    范围显示设置按钮 = QPushButton("X轴范围", 窗口_子窗口)  # 创建一个按钮，初始文字为MEMU
    范围显示设置按钮.setGeometry(825, 75, 75, 30)  # 设置按钮的位置和大小
    范围显示设置按钮.setStyleSheet("background-color:#ffffff; color: #BCA843;border: 2px solid #BCA843;")  # 设置按钮的样式
    范围显示设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    范围显示设置按钮.clicked.connect(lambda: 显示图片())
    范围显示设置按钮.show()  # 显示按钮
def 显示图片():
    global 图片窗口, 窗口可见
    print("显示图片函数被调用")

    if 图片窗口 is None:
        # 首次调用，创建新窗口
        图片路径 = 路径修正("文件/X轴范围显示.png")
        if not os.path.exists(图片路径):
            print(f"错误：文件 {图片路径} 不存在")
            return

        try:
            # 创建一个顶层窗口
            图片窗口 = QtWidgets.QWidget()
            图片窗口.setWindowFlags(
                QtCore.Qt.WindowStaysOnTopHint |
                QtCore.Qt.FramelessWindowHint |
                QtCore.Qt.Tool
            )
            图片窗口.setAttribute(QtCore.Qt.WA_TranslucentBackground)
            图片窗口.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)

            # 获取屏幕大小
            屏幕 = QtWidgets.QApplication.primaryScreen().size()
            屏幕宽度 = 屏幕.width()
            屏幕高度 = 屏幕.height()

            # 加载图片并缩放到屏幕大小
            原始图片 = QtGui.QPixmap(图片路径)
            if 原始图片.isNull():
                print(f"错误：无法加载图片 {图片路径}")
                return
            缩放图片 = 原始图片.scaled(屏幕宽度, 屏幕高度, QtCore.Qt.KeepAspectRatioByExpanding,
                                       QtCore.Qt.SmoothTransformation)

            # 创建标签并设置图片
            图片标签 = QtWidgets.QLabel(图片窗口)
            图片标签.setPixmap(缩放图片)
            图片标签.setGeometry(0, 0, 屏幕宽度, 屏幕高度)
            图片标签.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)  # 使图片标签也可穿透

            # 设置窗口大小为屏幕大小
            图片窗口.setGeometry(0, 0, 屏幕宽度, 屏幕高度)

            # 显示窗口
            图片窗口.show()
            窗口可见 = True

            print(f"窗口已创建并显示，大小为 {屏幕宽度}x{屏幕高度}")

        except Exception as e:
            print(f"发生错误：{str(e)}")
    else:
        # 窗口已存在，切换可见性
        if 窗口可见:
            图片窗口.hide()
            窗口可见 = False
            print("窗口已隐藏")
        else:
            图片窗口.show()
            窗口可见 = True
            print("窗口已显示")
def 子窗口大封印术():
    # 创建新的图片标签和按钮
    封印术设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示封印术的图片
    封印术设置图片标签.setPixmap(QPixmap(路径修正("文件/全部封印.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  #
    封印术设置图片标签.setGeometry(900, 0, 75, 75)  # 设置标签的位置和大小
    封印术设置图片标签.show()  # 显示标签

    封印术设置按钮 = QPushButton("封印术", 窗口_子窗口)  # 创建一个按钮，初始文字为M
    封印术设置按钮.setGeometry(900, 75, 75, 30)  # 设置按钮的位置和大小
    封印术设置按钮.setStyleSheet("background-color:#ffffff; color: #A10000;border: 2px solid #A10000;")  # 设置按钮的样式
    封印术设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    封印术设置按钮.show()  # 显示按钮
    封印术设置按钮.clicked.connect(lambda: 大封印术())
def 大封印术():
    global 窗口_子窗口, 一叶障窗口, 图片窗口

    # 检查一叶障窗口是否已创建并隐藏它
    if '一叶障窗口' in globals() and 一叶障窗口 is not None:
        一叶障窗口.hide()

    # 检查图片窗口是否已创建并隐藏它
    if '图片窗口' in globals() and 图片窗口 is not None:
        图片窗口.hide()

    # 检查窗口_子窗口是否已创建并关闭它
    if '窗口_子窗口' in globals() and 窗口_子窗口 is not None:
        窗口_子窗口.close()
        窗口_子窗口.deleteLater()
        窗口_子窗口 = None

    全部封印项目()
def 全部封印项目():
    for 所有状态键 in 状态开关字典:
        状态开关字典[所有状态键] = "关闭"
        # print(状态开关字典)
    print("已停止所有附加功能")
def 子窗口关闭按钮():
    # 创建新的图片标签和按钮
    关闭设置图片标签 = QLabel(窗口_子窗口)  # 创建一个标签，用于显示关闭的图片
    关闭设置图片标签.setPixmap(QPixmap(路径修正("文件/关闭.png")).scaled(75, 75, Qt.KeepAspectRatio, Qt.SmoothTransformation))  #
    关闭设置图片标签.setGeometry(975, 0, 75, 75)  # 设置标签的位置和大小
    关闭设置图片标签.show()  # 显示标签

    关闭设置按钮 = QPushButton("退出界面", 窗口_子窗口)  # 创建一个按钮，初始文字为M
    关闭设置按钮.setGeometry(975, 75, 75, 30)  # 设置按钮的位置和大小
    关闭设置按钮.setStyleSheet("background-color:#ffffff; color: #A10000;border: 2px solid #A10000;")  # 设置按钮的样式
    关闭设置按钮.setFont(窗口使用稍小字体)  # 设置按钮的字体
    关闭设置按钮.show()  # 显示按钮
    关闭设置按钮.clicked.connect(lambda: 子窗口创建())
def 创建组件(父窗口):
    global 倒计时所用时间
    # 创建第1个按钮 - 重置计时
    重置计时按钮 = QPushButton('重置计时', 父窗口)
    重置计时按钮.setGeometry(375, -50, 75, 30)
    重置计时按钮.setFont(窗口使用稍小字体)
    重置计时按钮.setStyleSheet("background-color:#ffffff; color: #A10000;border: 2px solid #A10000;")

    # 创建第1个文本标签 - 计时显示
    计时显示标签 = QLabel(f'{倒计时所用时间 / 10:.1f} 秒', 父窗口)
    计时显示标签.setGeometry(375, 30, 75, 45)
    计时显示标签.setAlignment(Qt.AlignCenter)  # 文字居中
    计时显示标签.setFont(窗口使用稍小字体)
    计时显示标签.setStyleSheet("background-color:#ffffff; color: #000000;border: 2px solid #FFDF00;")

    # 创建第2个按钮 - 减少延迟
    减少延迟按钮 = QPushButton('减少延迟', 父窗口)
    减少延迟按钮.setGeometry(375, 75, 75, 30)
    减少延迟按钮.setFont(窗口使用稍小字体)
    减少延迟按钮.setStyleSheet("background-color:#ffffff; color: #00FF39;border: 2px solid #00FF39;")

    # 创建第3个按钮 - 增加延迟
    增加延迟按钮 = QPushButton('增加延迟', 父窗口)
    增加延迟按钮.setGeometry(375, 0, 75, 30)
    增加延迟按钮.setFont(窗口使用稍小字体)
    增加延迟按钮.setStyleSheet("background-color:#ffffff; color: #FF000B;border: 2px solid #FF000B;")

    def 重置计时():
        global 倒计时所用时间
        倒计时所用时间 = 150
        更新计时显示()

    def 减少延迟():
        global 倒计时所用时间
        倒计时所用时间 -= 1
        更新计时显示()

    def 增加延迟():
        global 倒计时所用时间
        倒计时所用时间 += 1
        更新计时显示()

    def 更新计时显示():
        计时显示标签.setText(f'{倒计时所用时间 / 10:.1f} 秒')

    # 连接按钮与功能
    重置计时按钮.clicked.connect(重置计时)
    减少延迟按钮.clicked.connect(减少延迟)
    增加延迟按钮.clicked.connect(增加延迟)
#其他子窗口(已弃用)

def 创建窗口关于():
    global 窗口_关于
    窗口_关于 = QWidget()
    图标路径列表 = [
        路径修正("文件/icon/1.ico"),
        路径修正("文件/icon/2.ico"),
        路径修正("文件/icon/3.ico"),
        路径修正("文件/icon/4.ico"),
        路径修正("文件/icon/5.ico"),
        路径修正("文件/icon/6.ico"),
        # 你可以继续添加其他图标路径
    ]
    随机图标路径 = random.choice(图标路径列表)
    窗口图标 = QIcon(随机图标路径)
    窗口_关于.setWindowIcon(窗口图标)
    窗口_关于.setWindowTitle("关于本软件的各种")
    窗口_关于.setFixedSize(500, 420)

    标签一 = QLabel('<span style="color: #72E692;">唯一作者ID:</span> 凤灯幽夜', 窗口_关于)
    标签一.setGeometry(0, 0, 500, 30)
    标签一.setFont(QFont(窗口使用稍大字体))

    标签二 = QLabel('<span style="color: #E672C6;">Bili_Uid:</span> 11897940', 窗口_关于)
    标签二.setGeometry(0, 30, 500, 30)
    标签二.setFont(QFont(窗口使用稍大字体))

    标签三 = QLabel('<span style="color: #245DDB;">讨论群:</span> 548419960', 窗口_关于)
    标签三.setGeometry(0, 60, 500, 30)
    标签三.setFont(QFont(窗口使用稍大字体))

    标签四 = QLabel('<span style="color: #6B5CA3;">当前版本:</span> V4.5', 窗口_关于)
    标签四.setGeometry(0, 90, 500, 30)
    标签四.setFont(QFont(窗口使用稍大字体))

    标签五 = QLabel('<span style="color: #ffffff;">助手:非攻', 窗口_关于)
    标签五.setGeometry(250, 0, 500, 30)
    标签五.setFont(QFont(窗口使用稍大字体))

    收款码设置图片标签 = QLabel(窗口_关于)
    收款码设置图片标签.setPixmap(QPixmap(路径修正("文件/收款码.png")).scaled(500, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation))  #
    收款码设置图片标签.setGeometry(0, 120, 500, 300)
    收款码设置图片标签.show()

    窗口_关于.show()

def 创建窗口教程():
    global 窗口_教程
    窗口_教程 = QWidget()
    图标路径列表 = [
        路径修正("文件/icon/1.ico"),
        路径修正("文件/icon/2.ico"),
        路径修正("文件/icon/3.ico"),
        路径修正("文件/icon/4.ico"),
        路径修正("文件/icon/5.ico"),
        路径修正("文件/icon/6.ico"),
        # 你可以继续添加其他图标路径
    ]
    随机图标路径 = random.choice(图标路径列表)
    窗口图标 = QIcon(随机图标路径)
    窗口_教程.setWindowIcon(窗口图标)
    窗口_教程.setWindowTitle("教程/配置")
    窗口_教程.setFixedSize(400, 170)

    标签一 = QLabel('<span style="color: #72E692;">点击按钮召出文件,文件于同目录', 窗口_教程)
    标签一.setGeometry(0, 0, 500, 30)
    标签一.setFont(QFont(窗口使用稍大字体))
    标签二 = QLabel('<span style="color: #FC80FF;">可以查看教程文档了解使用方法', 窗口_教程)
    标签二.setGeometry(0, 30, 500, 30)
    标签二.setFont(QFont(窗口使用稍大字体))
    标签三 = QLabel('<span style="color: #CBDF20;">配置文件中说明了配置方法', 窗口_教程)
    标签三.setGeometry(0, 60, 500, 30)
    标签三.setFont(QFont(窗口使用稍大字体))
    标签四 = QLabel('<span style="color: #3420DF;">误删文件也可以点按钮恢复', 窗口_教程)
    标签四.setGeometry(0, 90, 500, 30)
    标签四.setFont(QFont(窗口使用稍大字体))

    复制文件的按钮 = QPushButton("点我召出说明文档与配置文档", 窗口_教程)
    复制文件的按钮.setGeometry(0, 120, 400, 50)
    复制文件的按钮.setStyleSheet("background-color:#ffffff; color: #A10000;border: 2px solid #A10000;")
    复制文件的按钮.setFont(窗口使用稍大字体)
    复制文件的按钮.clicked.connect(lambda: 复制文件())

    窗口_教程.show()
def 复制文件():
    # 获取当前执行的文件所在目录
    if getattr(sys, 'frozen', False):  # 检查程序是否被打包
        可执行文件目录 = os.path.dirname(sys.executable)
    else:
        可执行文件目录 = os.path.dirname(os.path.abspath(__file__))

    # 获取打包后的文件路径
    if getattr(sys, 'frozen', False):
        嵌入文件目录 = os.path.join(sys._MEIPASS, "文件", "内嵌内容")
    else:
        嵌入文件目录 = os.path.join(可执行文件目录, "文件", "内嵌内容")

    # 定义需要复制的文件列表
    要复制的文件列表 = ["使用教程.docx", "配置.txt","开发日志.txt"]

    for 文件名 in 要复制的文件列表:
        源文件路径 = os.path.join(嵌入文件目录, 文件名)
        目标文件路径 = os.path.join(可执行文件目录, 文件名)

        if os.path.exists(目标文件路径):
            print(f"文件已存在: {文件名}")  # 文件已存在
        else:
            # 检查源文件路径是否有效
            if os.path.exists(源文件路径):
                shutil.copy(源文件路径, 目标文件路径)
                print(f"文件不存在, 已复制: {文件名}")  # 文件不存在，已复制
            else:
                print(f"源文件不存在: {文件名}")  # 源文件不存在
#键盘
def 按键检测(key):
    try:
        if key.char == 按键["关闭程序"]:
            工作线程.UPDATE_SIGNAL.emit(('书写天命',))
        if key.char == 按键["触发左方替身"]:
            工作线程.UPDATE_SIGNAL.emit(('触发替身',"左方",))
        if key.char == 按键["触发右方替身"]:
            工作线程.UPDATE_SIGNAL.emit(('触发替身',"右方",))
        if key.char == 按键["花火回天"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_回天,))
        if key.char == 按键["花火柔拳"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_柔拳,))
        if key.char == 按键["花火不告诉你"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_不告诉你,))
        if key.char == 按键["花火空掌"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_空掌,))
        if key.char == 按键["花火冬天什么来着"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_冬天什么来着,))
        if key.char == 按键["花火明察秋毫"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 冬日花火_明察秋毫,))
        if key.char == 按键["花火快跑"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能', 花火快跑,))
        if key.char == 按键["长门雷遁"]:
            工作线程.UPDATE_SIGNAL.emit(('青年长门五遁', "雷遁",))
        if key.char == 按键["长门土遁"]:
            工作线程.UPDATE_SIGNAL.emit(('青年长门五遁', "土遁",))
        if key.char == 按键["长门水遁"]:
            工作线程.UPDATE_SIGNAL.emit(('青年长门五遁', "水遁",))
        if key.char == 按键["长门火遁"]:
            工作线程.UPDATE_SIGNAL.emit(('青年长门五遁', "火遁",))
        if key.char == 按键["长门风遁"]:
            工作线程.UPDATE_SIGNAL.emit(('青年长门五遁', "风遁",))
        if key.char == 按键["佐助天照"]:
            工作线程.UPDATE_SIGNAL.emit(('须佐佐助天照',))
        if key.char == 按键["漂泊佩恩通灵"]:
            工作线程.UPDATE_SIGNAL.emit(('漂泊佩恩畜生道',))
    except AttributeError:
        pass
def 按键松开(key):
    try:
        if key.char == 按键["花火快跑"]:
            工作线程.UPDATE_SIGNAL.emit(('冬日花火技能',花火快跑划普攻))
    except AttributeError:
        pass
def 启动键盘监听():
    with pynput_keyboard.Listener(on_press=按键检测,on_release=按键松开) as listener:
        listener.join()
#替身
def 替身触发后续(方位):
    if 线程开关["状态"] == "开启":
        if 方位=="左方":
            工作线程.UPDATE_SIGNAL.emit(('开始左方倒计时',窗口_根窗口,))
        elif 方位=="右方":
            工作线程.UPDATE_SIGNAL.emit(('开始右方倒计时',窗口_根窗口,))
        工作线程.UPDATE_SIGNAL.emit(('单检测', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('双检测', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('二检测', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('同检测', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('集检测', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('长十郎切刀', 方位,))
        工作线程.UPDATE_SIGNAL.emit(('停止点穴', 方位,))
        #threading.Thread(target=自动_技能触发_单检测, args=(方位,)).start()
        #threading.Thread(target=自动_技能触发_双检测, args=(方位,)).start()
        #threading.Thread(target=自动_技能触发_二检测, args=(方位,)).start()
        #threading.Thread(target=自动_技能触发_同检测, args=(方位,)).start()
        #threading.Thread(target=自动_技能触发_长十郎, args=(方位,)).start()
        #threading.Thread(target=自动_停止点穴_忍战宁次, args=(方位,)).start()
        #threading.Thread(target=自动_技能触发_集检测, args=(方位,)).start()
#即时触发逻辑
def 自动_即时触发():
    if 状态开关字典.get(f"状态_柔拳法_忍战宁次", "关闭") == "开启":
        threading.Thread(target=自动_柔拳法_忍战宁次).start()
    if 状态开关字典.get(f"状态_雷虐水平千代舞_青年艾", "关闭") == "开启":
        threading.Thread(target=自动_雷虐水平千代舞_青年艾).start()
    if 状态开关字典.get(f"状态_秘术心脏夺取_秽土角都", "关闭") == "开启":
        threading.Thread(target=自动_秘术心脏夺取_秽土角都).start()
    if 状态开关字典.get(f"状态_百豪樱花坠_忍战樱", "关闭") == "开启":
        threading.Thread(target=自动_百豪樱花坠_忍战樱).start()
    if 状态开关字典.get(f"状态_回放", "关闭") == "开启":
        threading.Thread(target=自动_保存回放).start()
#即时触发
def 自动_保存回放():
    举报反馈RGB = 获取像素RGB(整合大字典["结算界面"]["举报反馈_位置"][0],整合大字典["结算界面"]["举报反馈_位置"][1])
    保存回放RGB = 获取像素RGB(整合大字典["结算界面"]["保存回放_位置"][0],整合大字典["结算界面"]["保存回放_位置"][1])
    if 举报反馈RGB == 整合大字典["结算界面"]["举报反馈_像素"] and 保存回放RGB == 整合大字典["结算界面"]["保存回放_像素"]:
        mouse.move(1500, 50, )
        mouse.press(button="left")
        time.sleep(0.1)
        mouse.release(button="left")
        mouse.move(0, 0)
        print("已保存回放")
def 自动_柔拳法_忍战宁次():
    if not keyboard.is_pressed('o') and not keyboard.is_pressed('j'):
        宁次二技能RGB = 获取像素RGB(整合大字典["按钮_位置"]["二技能_外圈_位置"][0],整合大字典["按钮_位置"]["二技能_外圈_位置"][1])
        if 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][0][0] <= 宁次二技能RGB[0] <= 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][1][0] and 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][0][1] <= 宁次二技能RGB[1] <= 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][1][1] and 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][0][2] <= 宁次二技能RGB[2] <= 整合大字典["单检测按钮_像素"]["忍战宁次_外圈_像素"][1][2]:
            threading.Thread(target=触发_普攻短按_无修正).start()
            print("目押点穴成功!")
def 自动_百豪樱花坠_忍战樱():
    百豪樱花坠RGB = 获取像素RGB(整合大字典["按钮_位置"]["二技能_外圈_位置"][0],整合大字典["按钮_位置"]["二技能_外圈_位置"][1])
    if 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][0][0] <= 百豪樱花坠RGB[0] <= 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][1][0] and 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][0][1] <= 百豪樱花坠RGB[1] <= 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][1][1] and 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][0][2] <= 百豪樱花坠RGB[2] <= 整合大字典["单检测按钮_像素"]["忍战樱_外圈_像素"][1][2]:
        threading.Thread(target=触发_二技能短按_无修正).start()
        print("百豪樱花坠!")
def 自动_雷虐水平千代舞_青年艾():
    雷虐水平千代舞RGB = 获取像素RGB(整合大字典["按钮_位置"]["下子技能一_位置"][0],整合大字典["按钮_位置"]["下子技能一_位置"][1])
    if 雷虐水平千代舞RGB == 整合大字典["单检测按钮_像素"]["雷虐水平千代舞_青年艾_像素"]:
        threading.Thread(target=触发_下子技能短按_无修正).start()
        print("雷虐水平千代舞")
def 自动_秘术心脏夺取_秽土角都():
    秘术心脏夺取RGB = 获取像素RGB(整合大字典["按钮_位置"]["秽土角都_心脏夺取_位置"][0],整合大字典["按钮_位置"]["秽土角都_心脏夺取_位置"][1])
    if 秘术心脏夺取RGB == 整合大字典["单检测按钮_像素"]["秘术心脏夺取_秽土角都_像素"]:
        threading.Thread(target=触发_秽土角都心脏夺取_无修正).start()
        print("心脏夺取!")
def 自动_停止点穴_忍战宁次(当前位置):
    if 状态开关字典.get(f"状态_柔拳法_忍战宁次", "关闭") == "开启":
        if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
            状态开关字典["状态_柔拳法_忍战宁次"] = "关闭"
            time.sleep(3)
            状态开关字典["状态_柔拳法_忍战宁次"] = "开启"
            print("暂时停止点穴")

def 触发_一技能长按_无修正():
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(2.5)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能双短按_无修正():  # 红夜带土
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    time.sleep(0.3)
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能长按_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(2.5)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能短按_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能双短按_有修正():  # 红夜带土
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    time.sleep(0.3)
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_一技能短按_无修正_延迟():
    time.sleep(0.4)
    mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)


def 触发_二技能长按_无修正():
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(2.5)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能双短按_无修正():  # 红夜带土
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    time.sleep(0.3)
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能长按_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(2.5)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能短按_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能双短按_有修正():  # 红夜带土
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    time.sleep(0.3)
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能长按_无修正_延迟():
    time.sleep(0.4)
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(2.5)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_二技能短按_无修正_延迟():
    time.sleep(0.4)
    mouse.move(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)


def 触发_奥义短按_无修正_延迟():
    time.sleep(0.4)
    mouse.move(整合大字典["按钮_位置"]["奥义_中心_位置"][0], 整合大字典["按钮_位置"]["奥义_中心_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_奥义短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["奥义_中心_位置"][0], 整合大字典["按钮_位置"]["奥义_中心_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_奥义长按_无修正():
    mouse.move(整合大字典["按钮_位置"]["奥义_中心_位置"][0], 整合大字典["按钮_位置"]["奥义_中心_位置"][1])
    mouse.press(button='left')
    time.sleep(2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_上子技能短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["上子技能一_位置"][0], 整合大字典["按钮_位置"]["上子技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_下子技能短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_下子技能短按_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)


def 触发_一划二_无修正_延迟():
    time.sleep(0.4)
    mouse.drag(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1] ,整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1] , absolute=True,duration=0.03)
    mouse.move(0, 0)
def 触发_二划一_无修正_延迟():
    time.sleep(0.4)
    mouse.drag(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1],整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1] , absolute=True,duration=0.03)
    mouse.move(0, 0)
def 触发_一划普攻_有修正():
    threading.Thread(target=触发_普攻按键归零).start()
    mouse.drag(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1] ,整合大字典["按钮_位置"]["普攻_位置"][0], 整合大字典["按钮_位置"]["普攻_位置"][1] , absolute=True,duration=0.02)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_单刀划普攻_无修正_延迟():
    time.sleep(0.4)
    mouse.drag(整合大字典["按钮_位置"]["长十郎_单刀_位置"][0], 整合大字典["按钮_位置"]["长十郎_单刀_位置"][1], 整合大字典["按钮_位置"]["普攻_位置"][0], 整合大字典["按钮_位置"]["普攻_位置"][1], absolute=True, duration=0.03)
    mouse.move(0, 0)
def 触发_奥义划普攻_无修正():
    mouse.drag(整合大字典["按钮_位置"]["奥义_中心_位置"][0], 整合大字典["按钮_位置"]["奥义_中心_位置"][1], 整合大字典["按钮_位置"]["普攻_位置"][0],整合大字典["按钮_位置"]["普攻_位置"][1], absolute=True, duration=0.01)
    mouse.move(0, 0)
def 触发_青年长门水遁一_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][0]+5, 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1]-75, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门水遁二_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][0]+15, 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1]-75, absolute=True, duration=0.03)
    mouse.move(0, 0)
def 触发_青年长门土遁一_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][0]+5, 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1]+75, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门土遁二_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][0]+5, 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1]+75, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门火遁一_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][0]+75, 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1]+5, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门火遁二_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][0]+75, 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1]+5, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门雷遁一_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][0]-75, 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1]-5, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门雷遁二_无修正():
    mouse.drag(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1], -75, -5, absolute=True, duration=0.02)
    mouse.move(0, 0)
def 触发_青年长门风遁一_无修正():
    mouse.move(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_一技能_位置"][1])
    mouse.press(button='left')
    time.sleep(2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_青年长门风遁二_无修正():
    mouse.move(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0], 整合大字典["按钮_位置"]["青年长门_二技能_位置"][1])
    mouse.press(button='left')
    time.sleep(2)
    mouse.release(button='left')
    mouse.move(0, 0)

def 触发_舞自蛤蟆广_无修正():
    mouse.drag(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1],整合大字典["按钮_位置"]["二技能一_位置"][0]+50 ,整合大字典["按钮_位置"]["二技能一_位置"][1]+5 , absolute=True, duration=0.03)
    mouse.move(0, 0)
def 触发_秽土角都心脏夺取_无修正():
    mouse.move(整合大字典["按钮_位置"]["秽土角都_心脏夺取_位置"][0], 整合大字典["按钮_位置"]["秽土角都_心脏夺取_位置"][1])
    mouse.press(button='left')
    time.sleep(0.05)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_白面具神威_有修正():
    白面具能量条 = 获取像素RGB(1490,942)#254, 202, 1
    if 白面具能量条 ==(254, 202, 1):
        threading.Thread(target=触发_二技能短按_有修正).start()
def 触发_秘卷短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["秘卷一_位置"][0], 整合大字典["按钮_位置"]["秘卷一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)
def 触发_秘卷短按_有修正():
    threading.Thread(target=触发_移动按键归零).start()
    mouse.move(整合大字典["按钮_位置"]["秘卷一_位置"][0], 整合大字典["按钮_位置"]["秘卷一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)

def 触发_普攻短按_无修正():
    mouse.move(整合大字典["按钮_位置"]["普攻_位置"][0], 整合大字典["按钮_位置"]["普攻_位置"][1])
    mouse.press(button='left')
    time.sleep(0.2)
    mouse.release(button='left')
    mouse.move(0, 0)

def 触发_普攻按键归零():
    keyboard.press(按键["普攻键"])
    time.sleep(0.01)
    keyboard.release(按键["普攻键"])
    keyboard.block_key(按键["普攻键"])
    time.sleep(0.3)
    keyboard.unblock_key(按键["普攻键"])
def 触发_移动按键归零():
    keyboard.press(按键["上方向键"])
    keyboard.press(按键["左方向键"])
    keyboard.press(按键["下方向键"])
    keyboard.press(按键["右方向键"])
    keyboard.press(按键["普攻键"])
    time.sleep(0.01)
    keyboard.release(按键["上方向键"])
    keyboard.release(按键["左方向键"])
    keyboard.release(按键["下方向键"])
    keyboard.release(按键["右方向键"])
    keyboard.release(按键["普攻键"])
    keyboard.block_key(按键["上方向键"])
    keyboard.block_key(按键["左方向键"])
    keyboard.block_key(按键["下方向键"])
    keyboard.block_key(按键["右方向键"])
    keyboard.block_key(按键["普攻键"])
    time.sleep(0.3)
    keyboard.unblock_key(按键["上方向键"])
    keyboard.unblock_key(按键["左方向键"])
    keyboard.unblock_key(按键["下方向键"])
    keyboard.unblock_key(按键["右方向键"])
    keyboard.unblock_key(按键["普攻键"])
#threading.Thread(target=触发_反向转向).start()
def 触发_反向转向():

    if keyboard.is_pressed(按键["左方向键"]) and keyboard.is_pressed(按键["上方向键"]):
        keyboard.release(按键["上方向键"])
        keyboard.release(按键["左方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["右方向键"])
        keyboard.press(按键["下方向键"])
        time.sleep(0.2)
        keyboard.release(按键["右方向键"])
        keyboard.release(按键["下方向键"])
    elif keyboard.is_pressed(按键["上方向键"]) and keyboard.is_pressed(按键["右方向键"]):
        keyboard.release(按键["上方向键"])
        keyboard.release(按键["右方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["左方向键"])
        keyboard.press(按键["下方向键"])
        time.sleep(0.2)
        keyboard.release(按键["左方向键"])
        keyboard.release(按键["下方向键"])
    elif keyboard.is_pressed(按键["右方向键"]) and keyboard.is_pressed(按键["下方向键"]):
        keyboard.release(按键["下方向键"])
        keyboard.release(按键["右方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["左方向键"])
        keyboard.press(按键["上方向键"])
        time.sleep(0.2)
        keyboard.release(按键["左方向键"])
        keyboard.release(按键["上方向键"])
    elif keyboard.is_pressed(按键["下方向键"]) and keyboard.is_pressed(按键["左方向键"]):
        keyboard.release(按键["下方向键"])
        keyboard.release(按键["左方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["右方向键"])
        keyboard.press(按键["上方向键"])
        time.sleep(0.2)
        keyboard.release(按键["右方向键"])
        keyboard.release(按键["上方向键"])
    elif keyboard.is_pressed(按键["左方向键"]):
        keyboard.release(按键["左方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["右方向键"])
        time.sleep(0.2)
        keyboard.release(按键["右方向键"])
    elif keyboard.is_pressed(按键["上方向键"]):
        keyboard.release(按键["上方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["下方向键"])
        time.sleep(0.2)
        keyboard.release(按键["下方向键"])
    elif keyboard.is_pressed(按键["右方向键"]):
        keyboard.release(按键["右方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["左方向键"])
        time.sleep(0.2)
        keyboard.release(按键["左方向键"])
    elif keyboard.is_pressed(按键["下方向键"]):
        keyboard.release(按键["下方向键"])
        #threading.Thread(target=触发_移动按键归零).start()
        keyboard.press(按键["上方向键"])
        time.sleep(0.2)
        keyboard.release(按键["上方向键"])



#特殊触发
def 自动_技能触发_单检测(当前位置):
    for 自动技能名称, 自动技能位置, 自动触发函数,输出的台词 in 自动触发全列表_单:
        if 状态开关字典.get(f"状态_{自动技能名称}", "关闭") == "开启":
            if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
                当前函数内单检测技能RGB = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置][0],整合大字典["按钮_位置"][自动技能位置][1])
                if 当前函数内单检测技能RGB == 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"]:
                    threading.Thread(target=自动触发函数).start()
                    print(f'{输出的台词}!')
def 自动_技能触发_双检测(当前位置):
    for 自动技能名称, 自动技能位置一, 自动技能位置二, 自动触发函数,输出的台词 in 自动触发全列表_双:
        if 状态开关字典.get(f"状态_{自动技能名称}", "关闭") == "开启":
            if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
                当前函数内双检测技能RGB一 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置一][0],整合大字典["按钮_位置"][自动技能位置一][1])
                当前函数内双检测技能RGB二 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置二][0],整合大字典["按钮_位置"][自动技能位置二][1])
                if 当前函数内双检测技能RGB一 == 整合大字典["双检测按钮_像素"][f"{自动技能名称}_像素一"] or 当前函数内双检测技能RGB二 == 整合大字典["双检测按钮_像素"][f"{自动技能名称}_像素二"]:
                    threading.Thread(target=自动触发函数).start()
                    print(f'{输出的台词}!')
def 自动_技能触发_二检测(当前位置):
    for 自动技能名称, 自动技能位置一, 自动技能位置二, 自动触发函数,输出的台词 in 自动触发全列表_二:
        if 状态开关字典.get(f"状态_{自动技能名称}", "关闭") == "开启":
            if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
                当前函数内二检测技能RGB一 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置一][0],整合大字典["按钮_位置"][自动技能位置一][1])
                当前函数内二检测技能RGB二 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置二][0],整合大字典["按钮_位置"][自动技能位置二][1])
                if 当前函数内二检测技能RGB一 == 整合大字典["双检测按钮_像素"][f"{自动技能名称}_像素一"] and 当前函数内二检测技能RGB二 == 整合大字典["双检测按钮_像素"][f"{自动技能名称}_像素二"]:
                    threading.Thread(target=自动触发函数).start()
                    print(f'{输出的台词}!')
def 自动_技能触发_同检测(当前位置):
    for 自动技能名称, 自动技能位置一, 自动技能位置二,自动触发函数一,自动触发函数二,输出的台词 in 自动触发全列表_同:
        if 状态开关字典.get(f"状态_{自动技能名称}", "关闭") == "开启":
            if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
                当前函数内同检测技能RGB一 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置一][0],整合大字典["按钮_位置"][自动技能位置一][1])
                当前函数内同检测技能RGB二 = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置二][0],整合大字典["按钮_位置"][自动技能位置二][1])
                if 当前函数内同检测技能RGB一 == 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][0]:
                    threading.Thread(target=自动触发函数一).start()
                    print(f'{输出的台词}!')
                if 当前函数内同检测技能RGB二 == 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][1]:
                    threading.Thread(target=自动触发函数二).start()
                    print(f'{输出的台词}!')
def 自动_技能触发_集检测(当前位置):
    for 自动技能名称, 自动技能位置, 自动触发函数,输出的台词 in 自动触发全列表_集:
        if 状态开关字典.get(f"状态_{自动技能名称}", "关闭") == "开启":
            if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
                当前函数内集检测技能RGB = 获取像素RGB(整合大字典["按钮_位置"][自动技能位置][0],整合大字典["按钮_位置"][自动技能位置][1])
                if 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][0][0] <= 当前函数内集检测技能RGB[0] <= 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][1][0] and 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][0][1] <= 当前函数内集检测技能RGB[1] <= 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][1][1] and 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][0][2] <= 当前函数内集检测技能RGB[2] <= 整合大字典["单检测按钮_像素"][f"{自动技能名称}_像素"][1][2]:
                    threading.Thread(target=自动触发函数).start()
                    print(f'{输出的台词}!')
def 自动_技能触发_长十郎(当前位置):
    if 状态开关字典.get(f"状态_切刀_长十郎", "关闭") == "开启":
        if (当前位置 == "左方" and 我方位置字典["我方位置"] == "右方") or (当前位置 == "右方" and 我方位置字典["我方位置"] == "左方"):
            长十郎一技能RGB = 获取像素RGB(整合大字典["按钮_位置"]["一技能一_位置"][0],整合大字典["按钮_位置"]["一技能一_位置"][1])
            长十郎二技能RGB = 获取像素RGB(整合大字典["按钮_位置"]["二技能一_位置"][0],整合大字典["按钮_位置"]["二技能一_位置"][1])
            长十郎单刀RGB = 获取像素RGB(整合大字典["按钮_位置"]["长十郎_单刀_位置"][0],整合大字典["按钮_位置"]["长十郎_单刀_位置"][1])
            if 长十郎一技能RGB == 整合大字典["双检测按钮_像素"]["切刀_长十郎_像素一"][0] or 长十郎一技能RGB ==整合大字典["双检测按钮_像素"]["切刀_长十郎_像素二"][0] :
                threading.Thread(target=触发_一划二_无修正_延迟).start()
                print("长十郎一技能切刀二技能")
            elif 长十郎二技能RGB == 整合大字典["双检测按钮_像素"]["切刀_长十郎_像素一"][1] or 长十郎二技能RGB ==整合大字典["双检测按钮_像素"]["切刀_长十郎_像素二"][1]:
                threading.Thread(target=触发_二划一_无修正_延迟).start()
                print("长十郎二技能切刀一技能")
            elif 长十郎单刀RGB == 整合大字典["双检测按钮_像素"]["切刀_长十郎_像素一"][2] or 长十郎单刀RGB ==整合大字典["双检测按钮_像素"]["切刀_长十郎_像素二"][2]:
                threading.Thread(target=触发_单刀划普攻_无修正_延迟).start()
                print("血雾刀法-骨拔!")
#逻辑列表
自动触发全列表_单 = [
    #("","",),
    #[优先队列]
    ("宇智波反弹_创立斑","二技能一_位置",触发_二技能长按_无修正,"宇智波反弹"),
    #[一技能长按]
    ("炎遁加具土命飞炎强化_永恒佐助","一技能一_位置",触发_一技能长按_无修正,"这就是我的黑暗"),
    ("裂空天光斩空闪二式_百战水门","一技能一_位置",触发_一技能短按_有修正,"裂空天光斩空闪二式"),
    ("八卦掌回天_忍战宁次", "一技能一_位置", 触发_一技能短按_无修正,"回天"),
    ("驱岩之力轻重岩_黑土","一技能一_位置",触发_一技能长按_无修正,"噢噢噢噢~八嘎"),
    ("土遁土矛_秽土角都","一技能一_位置",触发_一技能长按_无修正,"太弱了"),
    ("电光火石_波风水门","一技能一_位置",触发_一技能长按_有修正,"飞雷神"),
    ("木遁木人之术_秽土柱间","一技能一_位置",触发_一技能长按_无修正,"木龙之术"),
    ("通灵术白蛇_咒印佐助", "一技能一_位置", 触发_一技能长按_无修正, "西内"),
    #[一技能短按]
    ("超时空闪光燕舞连段_秽土水门","一技能一_位置",触发_一技能短按_无修正,"飞雷神"),
    ("八尺琼勾玉_创立斑","一技能一_位置",触发_一技能短按_无修正,"须佐能乎"),
    ("天翔燕舞光瞬影残零式_青年水门","一技能一_位置",触发_一技能短按_无修正,"全是破绽"),
    ("飞绝命_青年三船","一技能二_位置",触发_一技能短按_无修正_延迟,"见证守护吧"),
    ("式纸之舞旋_泳装小南","一技能一_位置",触发_一技能短按_无修正,"交给我吧"),
    ("换位_千手扉间","一技能一_位置",触发_一技能短按_无修正,"在这呢"),
    ("白磷大蛇_晓蛇","一技能一_位置",触发_一技能短按_无修正,"乖乖的被吃掉吧"),
    ("木遁木龙之术_千手柱间", "一技能一_位置", 触发_一技能短按_无修正,"木龙之术"),
    ("须佐能乎_须佐佐助", "一技能一_位置", 触发_一技能短按_有修正,"须佐能乎"),
    ("尾兽形态二_奇拉比","一技能一_位置",触发_一技能短按_无修正,"尾兽化"),
    ("通灵术蛤蟆见世之术_自来也","一技能一_位置",触发_一技能短按_无修正,"通灵之术"),
    ("蛇使役术_半蛇兜","一技能一_位置",触发_一划普攻_有修正,"捉住了哦"),
    ("暴走_暴怒带土","一技能一_位置",触发_一技能短按_有修正,"啊啊啊"),

    #[二技能长按]
    ("神威_忍战带土","二技能一_位置",触发_二技能长按_无修正_延迟,"结束了"),
    ("忍法针地藏_川自","二技能一_位置",触发_二技能长按_无修正,"忍法·针地藏"),
    ("神罗天征_天道超","二技能一_位置",触发_二技能长按_有修正,"趁现在"),
    ("换位_秽土扉间","二技能一_位置",触发_二技能长按_无修正,"飞雷神"),
    ("乌鸦分身术二段_秽土鼬","二技能一_位置",触发_二技能短按_无修正,"没有意义的"),
    ("天之一斩_青年三船","二技能一_位置",触发_二技能短按_无修正_延迟,"粉碎吧"),
    ("铁矿砂结袭_蝎","二技能一_位置",触发_二技能长按_无修正,"砂铁结袭"),
    ("土遁土石连笋轻重岩_黑土","二技能一_位置",触发_二技能长按_无修正,"别小看了岩隐村的忍者啊"),
    ("水遁波乘击_千手扉间","二技能一_位置",触发_二技能长按_无修正,"吃我一招"),
    ("封术吸印_秽土长门","二技能一_位置",触发_二技能长按_无修正,"没用的"),
    ("凤仙火爪红_宇智波止水","二技能一_位置",触发_二技能长按_无修正,"凤仙火之术"),
    ("我流死寂_漂泊再不斩", "二技能一_位置", 触发_二技能长按_有修正, "哼哼"),
    ("雷遁轰雷_秽土三代", "二技能一_位置", 触发_二技能长按_有修正, "在这呢"),
    #[二技能短按]
    ("乌鸦分身术一段_秽土鼬","二技能一_位置",触发_二技能短按_无修正,"真是愚蠢"),
    ("土遁岩柱枪_不风","二技能一_位置",触发_二技能短按_有修正,"土遁·岩柱枪"),
    ("式纸之舞天使降临_新春小南","二技能一_位置",触发_二技能短按_无修正,"神之纸者之术"),
    ("式纸之舞蝶_漂泊小南","二技能一_位置",触发_二技能短按_无修正,"见识一下吧"),
    #[二技能特殊]
    ("神威_红夜带土", "二技能一_位置", 触发_二技能双短按_有修正,"没用的"),
    ("通灵术妙木山蛤蟆_舞自", "二技能一_位置", 触发_舞自蛤蟆广_无修正,"打飞他"),
    ("神威_白面具", "二技能一_位置", 触发_白面具神威_有修正,"没有人能阻止我"),
    #[奥义技能]
    ("须佐能乎胴_秽土解斑","奥义_中心_位置",触发_奥义短按_无修正_延迟,"起舞吧"),
    #[下子技能]
    ("封术吸印_漂泊佩恩","下子技能一_位置",触发_下子技能短按_无修正,"掩护我"),
    ("阎王_漂泊佩恩","下子技能一_位置",触发_下子技能短按_有修正,"在这里"),
    #[上子技能]
    ("白磷大蛇_仙人兜","上子技能一_位置",触发_上子技能短按_无修正,"这就是大蛇丸大人的力量!!"),
    ("雷遁最强之凯_三代雷影","上子技能一_位置",触发_上子技能短按_无修正,"最强之凯!"),
    #[秘卷]
    ("阴愈伤灭_秘卷","秘卷一_位置",触发_秘卷短按_无修正,"霸体"),
    ("手里剑护身_秘卷","秘卷一_位置",触发_秘卷短按_无修正,"螺旋桨"),
    ("水冲波_秘卷","秘卷一_位置",触发_秘卷短按_有修正,"水冲波"),
    ("御_秘卷","秘卷一_位置",触发_秘卷短按_无修正,"忍体术·御"),
    ("反_秘卷","秘卷一_位置",触发_秘卷短按_无修正,"忍体术·反"),
    ("雾隐之术_秘卷","秘卷一_位置",触发_秘卷短按_无修正,"雾隐之术"),
    #[专属秘卷]
    ("飞雷神导雷_百战水门","秘卷一_位置",触发_秘卷短按_无修正,"时空间忍术"),
    ("伊邪那美_秽土鼬","秘卷一_位置",触发_秘卷短按_无修正,"伊邪那美"),
    ("宇智波反弹_秽土解斑","秘卷一_位置",触发_秘卷短按_无修正,"宇智波反弹"),
    ("封术吸印_秽土解斑","秘卷一_位置",触发_秘卷短按_无修正,"天真"),
    ("封术吸印_青年长门","秘卷一_位置",触发_秘卷短按_无修正,"封术吸印"),
    ("仙人模式_九喇嘛鸣人","秘卷一_位置",触发_秘卷短按_无修正,"如何"),
    ("封术吸印_秽土斑","秘卷一_位置",触发_秘卷短按_无修正,"消失吧"),
    ("宇智波反弹_白面具", "秘卷一_位置", 触发_秘卷短按_有修正,"宇智波反弹"),
]
自动触发全列表_双 = [
    #[二技能短按]
    ("飞雷神之术神速_百战水门","二技能一_位置","二技能二_位置",触发_二技能短按_无修正,"神速"),
    #[上子技能短按]
    ("轻重岩之术_忍战大野木","上子技能一_位置","上子技能二_位置",触发_上子技能短按_无修正,"轻重岩之术"),
    #[秘卷]
    ("鬼灯笼_秘卷","秘卷一_位置","秘卷二_位置",触发_秘卷短按_无修正,"鬼灯笼"),
    ("水龙卷_秘卷","秘卷一_位置","秘卷二_位置",触发_秘卷短按_无修正,"水龙卷"),
    ("气旋_秘卷","秘卷一_位置","秘卷二_位置",触发_秘卷短按_无修正,"气旋"),
]
自动触发全列表_二 = [
    #[一技能长按]
    ("飞雷神斩_秽土扉间","一技能一_位置","一技能_黄条_位置",触发_一技能长按_有修正,"飞雷神斩"),
]
自动触发全列表_同 = [
    #[双技能相同]
    ("换位_罗砂","一技能一_位置","二技能一_位置",触发_一技能短按_无修正,触发_二技能短按_无修正,"太天真了"),
    ("换位_新春止水","一技能一_位置","奥义_中心_位置",触发_一技能长按_无修正,触发_奥义长按_无修正,"到此为止了"),
    ("土遁_青年长门","青年长门_一技能_位置","青年长门_二技能_位置",触发_青年长门土遁一_无修正,触发_青年长门土遁二_无修正,"土遁"),
    ("水遁_青年长门","青年长门_一技能_位置","青年长门_二技能_位置",触发_青年长门水遁一_无修正,触发_青年长门水遁二_无修正,"水遁"),
    ("须佐能乎_秽土斑","一技能一_位置","一技能一_位置",触发_一技能短按_无修正,触发_一技能短按_无修正,"你在干什么"),
    ("换位_金角银角","一技能一_位置","二技能一_位置",触发_一技能短按_无修正,触发_二技能短按_无修正,"."),

]
自动触发全列表_集 = [
    #[奥义动态]
    ("式纸之舞蔽日_漂泊小南","奥义_中心_位置",触发_奥义短按_无修正,"见识一下吧"),
    ("式纸之舞破晓_漂泊小南","奥义_中心_位置",触发_奥义短按_无修正,"已经没有时间了"),
    ("木遁木人之术_创立柱间","奥义_中心_位置",触发_奥义短按_无修正,"木遁·木人之术"),
    ("仙人模式_仙鸣","奥义_中心_位置",触发_奥义短按_无修正,"哈"),
    #[秘卷动态]
    ("裂炎弹_秘卷","秘卷_中心_位置",触发_秘卷短按_无修正,"裂炎弹"),

]
#冬日花火
冬日花火字典={
    "我说了算":(1530,750,),
    "回天":(1550,751),
    "不告诉你":(1531,770),
    "柔拳":(1510,749),
    "空掌":(1529,730),

}
花火快跑状态="开启"
def 冬日花火_回天():
    mouse.drag(冬日花火字典["我说了算"][0],冬日花火字典["我说了算"][1],冬日花火字典["回天"][0],冬日花火字典["回天"][1], absolute=True, duration=0.01)
    threading.Thread(target=触发_奥义划普攻_无修正).start()
def 冬日花火_不告诉你():
    mouse.drag(冬日花火字典["我说了算"][0],冬日花火字典["我说了算"][1],冬日花火字典["不告诉你"][0],冬日花火字典["不告诉你"][1], absolute=True, duration=0.01)
    threading.Thread(target=触发_奥义划普攻_无修正).start()
def 冬日花火_柔拳():
    mouse.drag(冬日花火字典["我说了算"][0],冬日花火字典["我说了算"][1],冬日花火字典["柔拳"][0],冬日花火字典["柔拳"][1], absolute=True, duration=0.01)
    threading.Thread(target=触发_奥义划普攻_无修正).start()
def 冬日花火_空掌():
    mouse.drag(冬日花火字典["我说了算"][0],冬日花火字典["我说了算"][1],冬日花火字典["空掌"][0],冬日花火字典["空掌"][1], absolute=True, duration=0.01)
    threading.Thread(target=触发_奥义划普攻_无修正).start()
def 冬日花火_明察秋毫():
    触发_奥义短按_无修正()
    触发_奥义短按_无修正()
    触发_普攻短按_无修正()
def 冬日花火_冬天什么来着():
    触发_奥义短按_无修正()
    触发_奥义短按_无修正()
    触发_奥义短按_无修正()
    触发_普攻短按_无修正()
def 花火快跑():
    global 花火快跑状态
    if 花火快跑状态=="开启":
            花火快跑状态="关闭"
            mouse.move(整合大字典["按钮_位置"]["一技能一_位置"][0], 整合大字典["按钮_位置"]["一技能一_位置"][1])
            mouse.press(button='left')
            time.sleep(3)
            mouse.release(button='left')
            花火快跑状态="开启"
def 花火快跑划普攻():
    触发_普攻短按_无修正()
def 花火线程(对应技能):
    if 状态开关字典.get(f"状态_冬日花火", "关闭") == "开启":
        print(对应技能)
        threading.Thread(target=对应技能).start()
#青年长门
def 青年长门五遁(遁术属性):

    if 状态开关字典.get(f"状态_青年长门", "关闭") == "开启":
        青年长门一技能RGB = 获取像素RGB(整合大字典["按钮_位置"]["青年长门_一技能_位置"][0],整合大字典["按钮_位置"]["青年长门_一技能_位置"][1])
        青年长门二技能RGB = 获取像素RGB(整合大字典["按钮_位置"]["青年长门_二技能_位置"][0],整合大字典["按钮_位置"]["青年长门_二技能_位置"][1])
        #print(青年长门一技能RGB)
        #print(青年长门二技能RGB)
        print(遁术属性)
        if 青年长门一技能RGB == 整合大字典["单检测按钮_像素"]["青年长门_像素"][0]:
            if   遁术属性 == "风遁":
                threading.Thread(target=触发_青年长门风遁一_无修正).start()
            elif 遁术属性 == "水遁":
                threading.Thread(target=触发_青年长门水遁一_无修正).start()
            elif 遁术属性 == "土遁":
                threading.Thread(target=触发_青年长门土遁一_无修正).start()
            elif 遁术属性 == "火遁":
                threading.Thread(target=触发_青年长门火遁一_无修正).start()
            elif 遁术属性 == "雷遁":
                threading.Thread(target=触发_青年长门雷遁一_无修正).start()
        elif 青年长门二技能RGB == 整合大字典["单检测按钮_像素"]["青年长门_像素"][1]:
            if   遁术属性 == "风遁":
                threading.Thread(target=触发_青年长门风遁二_无修正).start()
            elif 遁术属性 == "水遁":
                threading.Thread(target=触发_青年长门水遁二_无修正).start()
            elif 遁术属性 == "土遁":
                threading.Thread(target=触发_青年长门土遁二_无修正).start()
            elif 遁术属性 == "火遁":
                threading.Thread(target=触发_青年长门火遁二_无修正).start()
            elif 遁术属性 == "雷遁":
                threading.Thread(target=触发_青年长门雷遁二_无修正).start()
#须佐佐助
def 须佐佐助天照判定():
    if 状态开关字典.get(f"状态_须佐佐助", "关闭") == "开启":
        if keyboard.is_pressed("a") and keyboard.is_pressed("w"):
            threading.Thread(target=须佐佐助天照二段, args=("左上",)).start()
        elif keyboard.is_pressed("w") and keyboard.is_pressed("d"):
            threading.Thread(target=须佐佐助天照二段, args=("右上",)).start()
        elif keyboard.is_pressed("d") and keyboard.is_pressed("s"):
            threading.Thread(target=须佐佐助天照二段, args=("右下",)).start()
        elif keyboard.is_pressed("s") and keyboard.is_pressed("a"):
            threading.Thread(target=须佐佐助天照二段, args=("左下",)).start()
        elif keyboard.is_pressed("a"):
            threading.Thread(target=须佐佐助天照二段, args=("左",)).start()
        elif keyboard.is_pressed("w"):
            threading.Thread(target=须佐佐助天照二段, args=("上",)).start()
        elif keyboard.is_pressed("d"):
            threading.Thread(target=须佐佐助天照二段, args=("右",)).start()
        elif keyboard.is_pressed("s"):
            threading.Thread(target=须佐佐助天照二段, args=("下",)).start()
        else:
            threading.Thread(target=须佐佐助天照二段, args=("中",)).start()
def 须佐佐助天照二段(方向):
    print(f"加具土命!方向:{方向}")
    if   方向 == "左上":
        threading.Thread(target=须佐佐助天照八向, args=(-50,-50,)).start()
    elif 方向 == "右上":
        threading.Thread(target=须佐佐助天照八向, args=(50,-50,)).start()
    elif 方向 == "右下":
        threading.Thread(target=须佐佐助天照八向, args=(50, 50,)).start()
    elif 方向 == "左下":
        threading.Thread(target=须佐佐助天照八向, args=(-50, 50,)).start()
    elif 方向 == "左":
        threading.Thread(target=须佐佐助天照八向, args=(-50,0,)).start()
    elif 方向 == "上":
        threading.Thread(target=须佐佐助天照八向, args=(0,-50,)).start()
    elif 方向 == "右":
        threading.Thread(target=须佐佐助天照八向, args=(50, 0,)).start()
    elif 方向 == "下":
        threading.Thread(target=须佐佐助天照八向, args=(0,50,)).start()
    elif 方向 == "中":
        threading.Thread(target=须佐佐助天照八向, args=(0,0,)).start()
def 须佐佐助天照八向(X轴,Y轴):
    mouse.drag(整合大字典["按钮_位置"]["二技能一_位置"][0], 整合大字典["按钮_位置"]["二技能一_位置"][1], 整合大字典["按钮_位置"]["二技能一_位置"][0]+X轴,整合大字典["按钮_位置"]["二技能一_位置"][1]+Y轴, absolute=True, duration=0.05)
    mouse.move(0, 0)
#漂泊佩恩
def 漂泊佩恩畜生道子技能():
    if 状态开关字典.get(f"状态_漂泊佩恩", "关闭") == "开启":
        threading.Thread(target=漂泊佩恩通灵切人).start()
def 漂泊佩恩通灵切人():
    mouse.move(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1])
    mouse.press(button='left')
    time.sleep(0.1)
    漂泊佩恩畜生道子技能一RGB = 获取像素RGB(整合大字典["漂泊佩恩"]["畜生道一位置"][0],整合大字典["漂泊佩恩"]["畜生道一位置"][1])
    漂泊佩恩畜生道子技能二RGB = 获取像素RGB(整合大字典["漂泊佩恩"]["畜生道二位置"][0],整合大字典["漂泊佩恩"]["畜生道二位置"][1])
    漂泊佩恩畜生道子技能三RGB = 获取像素RGB(整合大字典["漂泊佩恩"]["畜生道三位置"][0],整合大字典["漂泊佩恩"]["畜生道三位置"][1])
    漂泊佩恩畜生道子技能四RGB = 获取像素RGB(整合大字典["漂泊佩恩"]["畜生道四位置"][0],整合大字典["漂泊佩恩"]["畜生道四位置"][1])
    if   漂泊佩恩畜生道子技能一RGB == 整合大字典["漂泊佩恩"]["饿鬼道一像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道一位置"][0],整合大字典["漂泊佩恩"]["畜生道一位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能二RGB == 整合大字典["漂泊佩恩"]["饿鬼道二像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道二位置"][0],整合大字典["漂泊佩恩"]["畜生道二位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能三RGB == 整合大字典["漂泊佩恩"]["饿鬼道三像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道三位置"][0],整合大字典["漂泊佩恩"]["畜生道三位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能四RGB == 整合大字典["漂泊佩恩"]["饿鬼道四像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道四位置"][0],整合大字典["漂泊佩恩"]["畜生道四位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能一RGB == 整合大字典["漂泊佩恩"]["地狱道一像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道一位置"][0],整合大字典["漂泊佩恩"]["畜生道一位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能二RGB == 整合大字典["漂泊佩恩"]["地狱道二像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道二位置"][0],整合大字典["漂泊佩恩"]["畜生道二位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能三RGB == 整合大字典["漂泊佩恩"]["地狱道三像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道三位置"][0],整合大字典["漂泊佩恩"]["畜生道三位置"][1] ,absolute=True, duration=0.03)
    elif 漂泊佩恩畜生道子技能四RGB == 整合大字典["漂泊佩恩"]["地狱道四像素"]:
        mouse.drag(整合大字典["按钮_位置"]["下子技能一_位置"][0], 整合大字典["按钮_位置"]["下子技能一_位置"][1],整合大字典["漂泊佩恩"]["畜生道四位置"][0],整合大字典["漂泊佩恩"]["畜生道四位置"][1] ,absolute=True, duration=0.03)
    mouse.release(button='left')
#配置设置
def 加载配置():
    # 获取当前执行文件的目录
    if hasattr(sys, 'frozen'):  # 检查是否是打包的exe
        运行目录 = os.path.dirname(sys.executable)
    else:
        运行目录 = os.path.dirname(os.path.abspath(__file__))

    配置文件名 = os.path.join(运行目录, '配置.txt')

    if os.path.exists(配置文件名):
        with open(配置文件名, 'r', encoding='utf-8') as f:
            配置代码 = f.read()
        exec(配置代码, globals())
        print(f"配置文件 '{配置文件名}' 已加载")
    else:
        print("常规启动")
加载配置()
def 配置重定义():
    if 使用模拟器 == "MEMU":
        整合大字典.update(逍遥模拟器)
    elif 使用模拟器 == "LD":
        整合大字典.update(雷电模拟器)
    elif 使用模拟器 == "MUMU":
        整合大字典.update(MUMU模拟器)
    elif 使用模拟器 == "NOX":
        整合大字典.update(夜神模拟器)
    if 检测性能级别 == "S":
        每秒检测时间["检测间隔"]=0.01
    elif 检测性能级别 == "A":
        每秒检测时间["检测间隔"]=0.02
    elif 检测性能级别 == "B":
        每秒检测时间["检测间隔"]=0.05
    elif 检测性能级别 == "C":
        每秒检测时间["检测间隔"]=0.1
    if 自动记牌与保存回放=="开启":
        状态开关字典["状态_武斗赛"] = "开启"
        状态开关字典["状态_回放"] = "开启"
    global 倒计时所用时间
    倒计时所用时间 = 倒计时延迟设定
配置重定义()
#线程相关
创建窗口()
